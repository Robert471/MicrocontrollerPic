CCS PCM C Compiler, Version 4.057, 10717               10-dic-16 05:39

               Filename: F:\Clase3\Ejemplos\Ejemplo2\Codigo\Ejemplo2.lst

               ROM used: 493 words (6%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         40 (11%) worst case
               Stack:    7 worst case (2 in main + 5 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   187
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.0
001C:  GOTO   01F
001D:  BTFSC  0C.0
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   12F
.................... /* 
....................  
.................... *GENERAR 100ms  
....................  
.................... TEMPORIZACION = 4*TOSC *VALORTIMER1*PRESCALER 
....................  
.................... TEMPORIZACION = 4*(1/FOSC)*VALORTIMER1*PRESCALER 
.................... TEMPORIZACION = (1us)*VALORTIMER1*PRESCALER 
....................  
.................... 100ms = (1us)*VALORTIMER0*PRESCALER 
....................  
.................... VALORTIMER1*PRESCALER = 100000 
....................  
.................... PRESCALER = 8 
....................  
.................... VALORTIMER1 = 12500   
....................  
.................... 65536 - N = 12500 
....................  
.................... N = 53036 
....................  
.................... */ 
....................  
.................... #INCLUDE <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #FUSES XT 
.................... #USE DELAY( CLOCK = 4M) 
*
009B:  MOVLW  39
009C:  MOVWF  04
009D:  BCF    03.7
009E:  MOVF   00,W
009F:  BTFSC  03.2
00A0:  GOTO   0AF
00A1:  MOVLW  01
00A2:  MOVWF  78
00A3:  CLRF   77
00A4:  DECFSZ 77,F
00A5:  GOTO   0A4
00A6:  DECFSZ 78,F
00A7:  GOTO   0A3
00A8:  MOVLW  4A
00A9:  MOVWF  77
00AA:  DECFSZ 77,F
00AB:  GOTO   0AA
00AC:  GOTO   0AD
00AD:  DECFSZ 00,F
00AE:  GOTO   0A1
00AF:  RETLW  00
.................... #DEFINE CARGA_TIMER1 53036  
.................... #INCLUDE <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0053:  MOVLW  F0
0054:  BSF    03.5
0055:  MOVWF  08
....................       lcd.rw = 1; 
0056:  BCF    03.5
0057:  BSF    08.2
....................       delay_cycles(1); 
0058:  NOP
....................       lcd.enable = 1; 
0059:  BSF    08.0
....................       delay_cycles(1); 
005A:  NOP
....................       high = lcd.data; 
005B:  MOVF   08,W
005C:  SWAPF  08,W
005D:  ANDLW  0F
005E:  MOVWF  40
....................       lcd.enable = 0; 
005F:  BCF    08.0
....................       delay_cycles(1); 
0060:  NOP
....................       lcd.enable = 1; 
0061:  BSF    08.0
....................       delay_us(1); 
0062:  NOP
....................       low = lcd.data; 
0063:  MOVF   08,W
0064:  SWAPF  08,W
0065:  ANDLW  0F
0066:  MOVWF  3F
....................       lcd.enable = 0; 
0067:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0068:  MOVLW  00
0069:  BSF    03.5
006A:  MOVWF  08
....................       return( (high<<4) | low); 
006B:  BCF    03.5
006C:  SWAPF  40,W
006D:  MOVWF  77
006E:  MOVLW  F0
006F:  ANDWF  77,F
0070:  MOVF   77,W
0071:  IORWF  3F,W
0072:  MOVWF  78
.................... } 
0073:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0074:  SWAPF  40,W
0075:  ANDLW  F0
0076:  MOVWF  77
0077:  MOVLW  0F
0078:  ANDWF  08,W
0079:  IORWF  77,W
007A:  MOVWF  08
....................       delay_cycles(1); 
007B:  NOP
....................       lcd.enable = 1; 
007C:  BSF    08.0
....................       delay_us(2); 
007D:  GOTO   07E
....................       lcd.enable = 0; 
007E:  BCF    08.0
.................... } 
007F:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0080:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0081:  CALL   053
0082:  MOVF   78,W
0083:  MOVWF  3F
0084:  BTFSC  3F.7
0085:  GOTO   081
....................       lcd.rs = address; 
0086:  BTFSS  3D.0
0087:  BCF    08.1
0088:  BTFSC  3D.0
0089:  BSF    08.1
....................       delay_cycles(1); 
008A:  NOP
....................       lcd.rw = 0; 
008B:  BCF    08.2
....................       delay_cycles(1); 
008C:  NOP
....................       lcd.enable = 0; 
008D:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
008E:  SWAPF  3E,W
008F:  MOVWF  3F
0090:  MOVLW  0F
0091:  ANDWF  3F,F
0092:  MOVF   3F,W
0093:  MOVWF  40
0094:  CALL   074
....................       lcd_send_nibble(n & 0xf); 
0095:  MOVF   3E,W
0096:  ANDLW  0F
0097:  MOVWF  3F
0098:  MOVWF  40
0099:  CALL   074
.................... } 
009A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
*
01A5:  MOVLW  00
01A6:  MOVWF  08
....................     lcd.rs = 0; 
01A7:  BCF    03.5
01A8:  BCF    08.1
....................     lcd.rw = 0; 
01A9:  BCF    08.2
....................     lcd.enable = 0; 
01AA:  BCF    08.0
01AB:  CLRF   28
01AC:  BTFSC  0B.7
01AD:  BSF    28.7
01AE:  BCF    0B.7
....................     delay_ms(15); 
01AF:  MOVLW  0F
01B0:  MOVWF  39
01B1:  CALL   09B
01B2:  BTFSC  28.7
01B3:  BSF    0B.7
....................     for(i=1;i<=3;++i) { 
01B4:  MOVLW  01
01B5:  MOVWF  2D
01B6:  MOVF   2D,W
01B7:  SUBLW  03
01B8:  BTFSS  03.0
01B9:  GOTO   1CE
01BA:  CLRF   28
01BB:  BTFSC  0B.7
01BC:  BSF    28.7
01BD:  BCF    0B.7
....................        lcd_send_nibble(3); 
01BE:  MOVLW  03
01BF:  MOVWF  40
01C0:  CALL   074
01C1:  BTFSC  28.7
01C2:  BSF    0B.7
01C3:  CLRF   28
01C4:  BTFSC  0B.7
01C5:  BSF    28.7
01C6:  BCF    0B.7
....................        delay_ms(5); 
01C7:  MOVLW  05
01C8:  MOVWF  39
01C9:  CALL   09B
01CA:  BTFSC  28.7
01CB:  BSF    0B.7
....................     } 
01CC:  INCF   2D,F
01CD:  GOTO   1B6
01CE:  CLRF   28
01CF:  BTFSC  0B.7
01D0:  BSF    28.7
01D1:  BCF    0B.7
....................     lcd_send_nibble(2); 
01D2:  MOVLW  02
01D3:  MOVWF  40
01D4:  CALL   074
01D5:  BTFSC  28.7
01D6:  BSF    0B.7
....................     for(i=0;i<=3;++i) 
01D7:  CLRF   2D
01D8:  MOVF   2D,W
01D9:  SUBLW  03
01DA:  BTFSS  03.0
01DB:  GOTO   1EB
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
01DC:  MOVF   2D,W
01DD:  CALL   035
01DE:  MOVWF  2E
01DF:  CLRF   28
01E0:  BTFSC  0B.7
01E1:  BSF    28.7
01E2:  BCF    0B.7
01E3:  CLRF   3D
01E4:  MOVF   2E,W
01E5:  MOVWF  3E
01E6:  CALL   080
01E7:  BTFSC  28.7
01E8:  BSF    0B.7
01E9:  INCF   2D,F
01EA:  GOTO   1D8
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00C7:  DECFSZ 3A,W
00C8:  GOTO   0CA
00C9:  GOTO   0CD
....................      address=lcd_line_two; 
00CA:  MOVLW  40
00CB:  MOVWF  3B
....................    else 
00CC:  GOTO   0CE
....................      address=0; 
00CD:  CLRF   3B
....................    address+=x-1; 
00CE:  MOVLW  01
00CF:  SUBWF  39,W
00D0:  ADDWF  3B,F
....................    lcd_send_byte(0,0x80|address); 
00D1:  MOVF   3B,W
00D2:  IORLW  80
00D3:  MOVWF  3C
00D4:  CLRF   3D
00D5:  MOVF   3C,W
00D6:  MOVWF  3E
00D7:  CALL   080
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00B0:  MOVF   38,W
00B1:  XORLW  0C
00B2:  BTFSC  03.2
00B3:  GOTO   0BB
00B4:  XORLW  06
00B5:  BTFSC  03.2
00B6:  GOTO   0C3
00B7:  XORLW  02
00B8:  BTFSC  03.2
00B9:  GOTO   0D9
00BA:  GOTO   0DE
....................      case '\f'   : lcd_send_byte(0,1); 
00BB:  CLRF   3D
00BC:  MOVLW  01
00BD:  MOVWF  3E
00BE:  CALL   080
....................                    delay_ms(2); 
00BF:  MOVLW  02
00C0:  MOVWF  39
00C1:  CALL   09B
....................                                            break; 
00C2:  GOTO   0E4
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00C3:  MOVLW  01
00C4:  MOVWF  39
00C5:  MOVLW  02
00C6:  MOVWF  3A
*
00D8:  GOTO   0E4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00D9:  CLRF   3D
00DA:  MOVLW  10
00DB:  MOVWF  3E
00DC:  CALL   080
00DD:  GOTO   0E4
....................      default     : lcd_send_byte(1,c);     break; 
00DE:  MOVLW  01
00DF:  MOVWF  3D
00E0:  MOVF   38,W
00E1:  MOVWF  3E
00E2:  CALL   080
00E3:  GOTO   0E4
....................    } 
.................... } 
00E4:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... int i = 0; 
*
0192:  BCF    03.5
0193:  CLRF   29
.................... int ss = 0,mm = 0, hh = 0; 
0194:  CLRF   2A
0195:  CLRF   2B
0196:  CLRF   2C
....................  
.................... //100ms 
.................... #INT_TIMER1 
.................... void TMR1_isr( ){ 
....................    output_toggle(PIN_B0); 
*
012F:  BSF    03.5
0130:  BCF    06.0
0131:  MOVLW  01
0132:  BCF    03.5
0133:  XORWF  06,F
....................    i++; 
0134:  INCF   29,F
....................    if( i>= 10){ 
0135:  MOVF   29,W
0136:  SUBLW  09
0137:  BTFSC  03.0
0138:  GOTO   17F
....................       i = 0; 
0139:  CLRF   29
....................       ss++; 
013A:  INCF   2A,F
....................       if(ss>=60){       ss = 0;mm++; 
013B:  MOVF   2A,W
013C:  SUBLW  3B
013D:  BTFSC  03.0
013E:  GOTO   14C
013F:  CLRF   2A
0140:  INCF   2B,F
....................          if(mm>=60){    mm = 0;hh++; 
0141:  MOVF   2B,W
0142:  SUBLW  3B
0143:  BTFSC  03.0
0144:  GOTO   14C
0145:  CLRF   2B
0146:  INCF   2C,F
....................             if(hh>=24){ hh = 0; 
0147:  MOVF   2C,W
0148:  SUBLW  17
0149:  BTFSC  03.0
014A:  GOTO   14C
014B:  CLRF   2C
....................             } 
....................          } 
....................       } 
....................       lcd_putc('\f'); 
014C:  MOVLW  0C
014D:  MOVWF  38
014E:  CALL   0B0
....................       printf(lcd_putc,"hh:%u-mm:%u-ss:%u",hh,mm,ss); 
014F:  MOVLW  68
0150:  MOVWF  38
0151:  CALL   0B0
0152:  MOVLW  68
0153:  MOVWF  38
0154:  CALL   0B0
0155:  MOVLW  3A
0156:  MOVWF  38
0157:  CALL   0B0
0158:  MOVF   2C,W
0159:  MOVWF  36
015A:  MOVLW  1B
015B:  MOVWF  37
015C:  CALL   0FA
015D:  MOVLW  05
015E:  MOVWF  34
015F:  MOVF   34,W
0160:  CALL   03D
0161:  INCF   34,F
0162:  MOVWF  77
0163:  MOVWF  38
0164:  CALL   0B0
0165:  MOVLW  09
0166:  SUBWF  34,W
0167:  BTFSS  03.2
0168:  GOTO   15F
0169:  MOVF   2B,W
016A:  MOVWF  36
016B:  MOVLW  1B
016C:  MOVWF  37
016D:  CALL   0FA
016E:  MOVLW  0B
016F:  MOVWF  35
0170:  MOVF   35,W
0171:  CALL   03D
0172:  INCF   35,F
0173:  MOVWF  77
0174:  MOVWF  38
0175:  CALL   0B0
0176:  MOVLW  0F
0177:  SUBWF  35,W
0178:  BTFSS  03.2
0179:  GOTO   170
017A:  MOVF   2A,W
017B:  MOVWF  36
017C:  MOVLW  1B
017D:  MOVWF  37
017E:  CALL   0FA
....................    } 
....................  
....................    set_timer1( CARGA_TIMER1 ); 
017F:  MOVLW  CF
0180:  MOVWF  0F
0181:  MOVLW  2C
0182:  MOVWF  0E
.................... } 
0183:  BCF    0C.0
0184:  BCF    0A.3
0185:  BCF    0A.4
0186:  GOTO   01F
.................... void main ( ){    
0187:  CLRF   04
0188:  BCF    03.7
0189:  MOVLW  1F
018A:  ANDWF  03,F
018B:  BSF    03.5
018C:  BSF    1F.0
018D:  BSF    1F.1
018E:  BSF    1F.2
018F:  BCF    1F.3
0190:  MOVLW  07
0191:  MOVWF  1C
....................     
....................    setup_timer_1( T1_INTERNAL|T1_DIV_BY_8 ); 
*
0197:  MOVLW  B5
0198:  MOVWF  10
....................    set_timer1( CARGA_TIMER1 ); 
0199:  MOVLW  CF
019A:  MOVWF  0F
019B:  MOVLW  2C
019C:  MOVWF  0E
....................    enable_interrupts( INT_TIMER1 );  
019D:  BSF    03.5
019E:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
019F:  MOVLW  C0
01A0:  BCF    03.5
01A1:  IORWF  0B,F
....................    set_tris_b(0); 
01A2:  MOVLW  00
01A3:  BSF    03.5
01A4:  MOVWF  06
....................    lcd_init(); 
....................    while (TRUE){ 
....................    } 
*
01EB:  GOTO   1EB
.................... } 
....................  
....................  
....................  
....................  
01EC:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
