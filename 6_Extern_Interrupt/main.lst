CCS PCM C Compiler, Version 4.114, 93465053               12-dic-16 13:15

               Filename: C:\Users\COMPUTADORA\Desktop\Core_LaboTEC\6_Extern_Interrupt\main.lst

               ROM used: 709 words (9%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         29 (8%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   284
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   037
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   xt 
.................... #use     delay(clock=4M) 
*
0049:  MOVLW  2E
004A:  MOVWF  04
004B:  BCF    03.7
004C:  MOVF   00,W
004D:  BTFSC  03.2
004E:  GOTO   05D
004F:  MOVLW  01
0050:  MOVWF  78
0051:  CLRF   77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  DECFSZ 78,F
0055:  GOTO   051
0056:  MOVLW  4A
0057:  MOVWF  77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  GOTO   05B
005B:  DECFSZ 00,F
005C:  GOTO   04F
005D:  RETURN
.................... #define  LCD_DATA_PORT getenv("SFR:PORTD") 
.................... #define  LCD_ENABLE_PIN  PIN_A3                                   
.................... #define  LCD_RS_PIN      PIN_A5                                   
.................... #define  LCD_RW_PIN      PIN_A2                                    
.................... #define  LCD_DATA4       PIN_D4 
.................... #define  LCD_DATA5       PIN_D5                                    
.................... #define  LCD_DATA6       PIN_D6                                     
.................... #define  LCD_DATA7       PIN_D7  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C2:  BSF    08.4
....................    output_float(LCD_DATA5); 
00C3:  BSF    08.5
....................    output_float(LCD_DATA6); 
00C4:  BSF    08.6
....................    output_float(LCD_DATA7); 
00C5:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C6:  BCF    03.5
00C7:  BSF    05.2
00C8:  BSF    03.5
00C9:  BCF    05.2
....................    delay_cycles(1); 
00CA:  NOP
....................    lcd_output_enable(1); 
00CB:  BCF    03.5
00CC:  BSF    05.3
00CD:  BSF    03.5
00CE:  BCF    05.3
....................    delay_cycles(1); 
00CF:  NOP
....................    high = lcd_read_nibble(); 
00D0:  BCF    03.5
00D1:  CALL   089
00D2:  MOVF   78,W
00D3:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
00D4:  BCF    05.3
00D5:  BSF    03.5
00D6:  BCF    05.3
....................    delay_cycles(1); 
00D7:  NOP
....................    lcd_output_enable(1); 
00D8:  BCF    03.5
00D9:  BSF    05.3
00DA:  BSF    03.5
00DB:  BCF    05.3
....................    delay_us(1); 
00DC:  NOP
....................    low = lcd_read_nibble(); 
00DD:  BCF    03.5
00DE:  CALL   089
00DF:  MOVF   78,W
00E0:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00E1:  BCF    05.3
00E2:  BSF    03.5
00E3:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E4:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E5:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00E6:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00E7:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00E8:  BCF    03.5
00E9:  SWAPF  35,W
00EA:  MOVWF  77
00EB:  MOVLW  F0
00EC:  ANDWF  77,F
00ED:  MOVF   77,W
00EE:  IORWF  34,W
00EF:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0089:  CLRF   36
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
008A:  BSF    03.5
008B:  BSF    08.4
008C:  MOVLW  00
008D:  BCF    03.5
008E:  BTFSC  08.4
008F:  MOVLW  01
0090:  IORWF  36,F
....................    n |= input(LCD_DATA5) << 1; 
0091:  BSF    03.5
0092:  BSF    08.5
0093:  MOVLW  00
0094:  BCF    03.5
0095:  BTFSC  08.5
0096:  MOVLW  01
0097:  MOVWF  77
0098:  BCF    03.0
0099:  RLF    77,F
009A:  MOVF   77,W
009B:  IORWF  36,F
....................    n |= input(LCD_DATA6) << 2; 
009C:  BSF    03.5
009D:  BSF    08.6
009E:  MOVLW  00
009F:  BCF    03.5
00A0:  BTFSC  08.6
00A1:  MOVLW  01
00A2:  MOVWF  77
00A3:  RLF    77,F
00A4:  RLF    77,F
00A5:  MOVLW  FC
00A6:  ANDWF  77,F
00A7:  MOVF   77,W
00A8:  IORWF  36,F
....................    n |= input(LCD_DATA7) << 3; 
00A9:  BSF    03.5
00AA:  BSF    08.7
00AB:  MOVLW  00
00AC:  BCF    03.5
00AD:  BTFSC  08.7
00AE:  MOVLW  01
00AF:  MOVWF  77
00B0:  RLF    77,F
00B1:  RLF    77,F
00B2:  RLF    77,F
00B3:  MOVLW  F8
00B4:  ANDWF  77,F
00B5:  MOVF   77,W
00B6:  IORWF  36,F
....................     
....................    return(n); 
00B7:  MOVF   36,W
00B8:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00B9:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
005E:  BTFSC  35.0
005F:  GOTO   062
0060:  BCF    08.4
0061:  GOTO   063
0062:  BSF    08.4
0063:  BSF    03.5
0064:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0065:  BCF    03.5
0066:  BTFSC  35.1
0067:  GOTO   06A
0068:  BCF    08.5
0069:  GOTO   06B
006A:  BSF    08.5
006B:  BSF    03.5
006C:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
006D:  BCF    03.5
006E:  BTFSC  35.2
006F:  GOTO   072
0070:  BCF    08.6
0071:  GOTO   073
0072:  BSF    08.6
0073:  BSF    03.5
0074:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0075:  BCF    03.5
0076:  BTFSC  35.3
0077:  GOTO   07A
0078:  BCF    08.7
0079:  GOTO   07B
007A:  BSF    08.7
007B:  BSF    03.5
007C:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
007D:  NOP
....................    lcd_output_enable(1); 
007E:  BCF    03.5
007F:  BSF    05.3
0080:  BSF    03.5
0081:  BCF    05.3
....................    delay_us(2); 
0082:  GOTO   083
....................    lcd_output_enable(0); 
0083:  BCF    03.5
0084:  BCF    05.3
0085:  BSF    03.5
0086:  BCF    05.3
.................... } 
0087:  BCF    03.5
0088:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BA:  BSF    03.5
00BB:  BCF    05.3
....................    lcd_rs_tris(); 
00BC:  BCF    05.5
....................    lcd_rw_tris(); 
00BD:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00BE:  BCF    03.5
00BF:  BCF    05.5
00C0:  BSF    03.5
00C1:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F0:  MOVF   78,W
00F1:  MOVWF  34
00F2:  BTFSS  34.7
00F3:  GOTO   0F6
00F4:  BSF    03.5
00F5:  GOTO   0C2
....................    lcd_output_rs(address); 
00F6:  MOVF   32,F
00F7:  BTFSS  03.2
00F8:  GOTO   0FB
00F9:  BCF    05.5
00FA:  GOTO   0FC
00FB:  BSF    05.5
00FC:  BSF    03.5
00FD:  BCF    05.5
....................    delay_cycles(1); 
00FE:  NOP
....................    lcd_output_rw(0); 
00FF:  BCF    03.5
0100:  BCF    05.2
0101:  BSF    03.5
0102:  BCF    05.2
....................    delay_cycles(1); 
0103:  NOP
....................    lcd_output_enable(0); 
0104:  BCF    03.5
0105:  BCF    05.3
0106:  BSF    03.5
0107:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
0108:  BCF    03.5
0109:  SWAPF  33,W
010A:  MOVWF  34
010B:  MOVLW  0F
010C:  ANDWF  34,F
010D:  MOVF   34,W
010E:  MOVWF  35
010F:  CALL   05E
....................    lcd_send_nibble(n & 0xf); 
0110:  MOVF   33,W
0111:  ANDLW  0F
0112:  MOVWF  34
0113:  MOVWF  35
0114:  CALL   05E
.................... } 
0115:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0116:  BSF    03.5
0117:  BCF    08.4
....................    output_drive(LCD_DATA5); 
0118:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0119:  BCF    08.6
....................    output_drive(LCD_DATA7); 
011A:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
011B:  BCF    05.3
....................    lcd_rs_tris(); 
011C:  BCF    05.5
....................    lcd_rw_tris(); 
011D:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
011E:  BCF    03.5
011F:  BCF    05.5
0120:  BSF    03.5
0121:  BCF    05.5
....................    lcd_output_rw(0); 
0122:  BCF    03.5
0123:  BCF    05.2
0124:  BSF    03.5
0125:  BCF    05.2
....................    lcd_output_enable(0); 
0126:  BCF    03.5
0127:  BCF    05.3
0128:  BSF    03.5
0129:  BCF    05.3
....................      
....................    delay_ms(15); 
012A:  MOVLW  0F
012B:  BCF    03.5
012C:  MOVWF  2E
012D:  CALL   049
....................    for(i=1;i<=3;++i) 
012E:  MOVLW  01
012F:  MOVWF  29
0130:  MOVF   29,W
0131:  SUBLW  03
0132:  BTFSS  03.0
0133:  GOTO   13E
....................    { 
....................        lcd_send_nibble(3); 
0134:  MOVLW  03
0135:  MOVWF  35
0136:  CALL   05E
....................        lcd_send_nibble(0); 
0137:  CLRF   35
0138:  CALL   05E
....................        delay_ms(5); 
0139:  MOVLW  05
013A:  MOVWF  2E
013B:  CALL   049
....................    } 
013C:  INCF   29,F
013D:  GOTO   130
....................     
....................    lcd_send_nibble(2); 
013E:  MOVLW  02
013F:  MOVWF  35
0140:  CALL   05E
....................    lcd_send_nibble(0); 
0141:  CLRF   35
0142:  CALL   05E
....................    delay_ms(5); 
0143:  MOVLW  05
0144:  MOVWF  2E
0145:  CALL   049
....................    for(i=0;i<=3;++i) 
0146:  CLRF   29
0147:  MOVF   29,W
0148:  SUBLW  03
0149:  BTFSS  03.0
014A:  GOTO   154
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014B:  MOVF   29,W
014C:  CALL   02F
014D:  MOVWF  2A
014E:  CLRF   32
014F:  MOVF   2A,W
0150:  MOVWF  33
0151:  CALL   0BA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0152:  INCF   29,F
0153:  GOTO   147
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0154:  BCF    0A.3
0155:  BCF    0A.4
0156:  GOTO   292 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
0160:  DECFSZ 2F,W
0161:  GOTO   163
0162:  GOTO   166
....................       address=LCD_LINE_TWO; 
0163:  MOVLW  40
0164:  MOVWF  30
....................    else 
0165:  GOTO   167
....................       address=0; 
0166:  CLRF   30
....................       
....................    address+=x-1; 
0167:  MOVLW  01
0168:  SUBWF  2E,W
0169:  ADDWF  30,F
....................    lcd_send_byte(0,0x80|address); 
016A:  MOVF   30,W
016B:  IORLW  80
016C:  MOVWF  31
016D:  CLRF   32
016E:  MOVF   31,W
016F:  MOVWF  33
0170:  CALL   0BA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0171:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0172:  MOVF   2D,W
0173:  XORLW  07
0174:  BTFSC  03.2
0175:  GOTO   180
0176:  XORLW  0B
0177:  BTFSC  03.2
0178:  GOTO   185
0179:  XORLW  06
017A:  BTFSC  03.2
017B:  GOTO   18D
017C:  XORLW  02
017D:  BTFSC  03.2
017E:  GOTO   193
017F:  GOTO   198
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0180:  MOVLW  01
0181:  MOVWF  2E
0182:  MOVWF  2F
0183:  CALL   160
0184:  GOTO   19E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0185:  CLRF   32
0186:  MOVLW  01
0187:  MOVWF  33
0188:  CALL   0BA
....................                      delay_ms(2); 
0189:  MOVLW  02
018A:  MOVWF  2E
018B:  CALL   049
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
018C:  GOTO   19E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
018D:  MOVLW  01
018E:  MOVWF  2E
018F:  MOVLW  02
0190:  MOVWF  2F
0191:  CALL   160
0192:  GOTO   19E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0193:  CLRF   32
0194:  MOVLW  10
0195:  MOVWF  33
0196:  CALL   0BA
0197:  GOTO   19E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0198:  MOVLW  01
0199:  MOVWF  32
019A:  MOVF   2D,W
019B:  MOVWF  33
019C:  CALL   0BA
019D:  GOTO   19E
....................      #endif 
....................    } 
.................... } 
019E:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\_Library\extern_interrupt.c" 
.................... #include "extern_interrupt.h" 
.................... #ifndef  __ULTRASONICO__ 
.................... #define  __ULTRASONICO__ 
....................  
.................... #define  RISING_EDGE    L_TO_H 
.................... #define  FALLING_EDGE   H_TO_L 
....................  
.................... void externinterrupt_init(); 
....................  
.................... #endif 
....................  
....................  
.................... int var_externinterrupt = 0; 
....................  
.................... #INT_EXT 
.................... void INT_EXT_isr(){ 
....................    var_externinterrupt = 1; 
*
0037:  MOVLW  01
0038:  MOVWF  27
.................... } 
....................  
0039:  BCF    0B.1
003A:  BCF    0A.3
003B:  BCF    0A.4
003C:  GOTO   01B
.................... void externinterrupt_init(){ 
....................    ext_int_edge( RISING_EDGE ); 
*
0157:  BSF    03.5
0158:  BSF    01.6
....................    enable_interrupts( INT_EXT ); 
0159:  BCF    03.5
015A:  BSF    0B.4
....................    enable_interrupts( GLOBAL ); 
015B:  MOVLW  C0
015C:  IORWF  0B,F
.................... } 
015D:  BCF    0A.3
015E:  BCF    0A.4
015F:  GOTO   293 (RETURN)
....................  
....................  
....................  
.................... void main(){ 
*
0284:  CLRF   04
0285:  BCF    03.7
0286:  MOVLW  1F
0287:  ANDWF  03,F
0288:  CLRF   27
0289:  BSF    03.5
028A:  BSF    1F.0
028B:  BSF    1F.1
028C:  BSF    1F.2
028D:  BCF    1F.3
028E:  MOVLW  07
028F:  MOVWF  1C
....................    int i; 
....................    lcd_init(); 
0290:  BCF    03.5
0291:  GOTO   116
....................    externinterrupt_init(); 
0292:  GOTO   157
....................  
....................    for(;;){ 
....................       for(i=0;i<=100;i++){ 
0293:  CLRF   28
0294:  MOVF   28,W
0295:  SUBLW  64
0296:  BTFSS  03.0
0297:  GOTO   2C3
....................          printf(lcd_putc,"Conteo:%u",i); 
0298:  MOVLW  3D
0299:  BSF    03.6
029A:  MOVWF  0D
029B:  MOVLW  00
029C:  MOVWF  0F
029D:  BCF    03.0
029E:  MOVLW  07
029F:  BCF    03.6
02A0:  MOVWF  29
02A1:  GOTO   19F
02A2:  MOVF   28,W
02A3:  MOVWF  29
02A4:  MOVLW  1B
02A5:  MOVWF  2A
02A6:  GOTO   205
....................          delay_ms(1000); 
02A7:  MOVLW  04
02A8:  MOVWF  29
02A9:  MOVLW  FA
02AA:  MOVWF  2E
02AB:  CALL   049
02AC:  DECFSZ 29,F
02AD:  GOTO   2A9
....................          lcd_putc('\f'); 
02AE:  MOVLW  0C
02AF:  MOVWF  2D
02B0:  CALL   172
....................          if(var_externinterrupt == 1){ 
02B1:  DECFSZ 27,W
02B2:  GOTO   2C1
....................             printf(lcd_putc,"\fINTERRUPCION"); 
02B3:  MOVLW  42
02B4:  BSF    03.6
02B5:  MOVWF  0D
02B6:  MOVLW  00
02B7:  MOVWF  0F
02B8:  BCF    03.6
02B9:  GOTO   23C
....................             delay_ms(100); 
02BA:  MOVLW  64
02BB:  MOVWF  2E
02BC:  CALL   049
....................             lcd_putc('\f'); 
02BD:  MOVLW  0C
02BE:  MOVWF  2D
02BF:  CALL   172
....................             var_externinterrupt = 0; 
02C0:  CLRF   27
....................          } 
....................       } 
02C1:  INCF   28,F
02C2:  GOTO   294
....................    } 
02C3:  GOTO   293
....................  
.................... } 
....................  
....................  
02C4:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
