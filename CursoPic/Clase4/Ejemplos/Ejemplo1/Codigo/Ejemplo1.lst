CCS PCM C Compiler, Version 4.114, 93513558               17-Dic.-16 01:38

               Filename: D:\LaboTEC\Cursos\Curso_PIC\Modulo_1\Clase4\Ejemplos\Ejemplo1\Codigo\Ejemplo1.lst

               ROM used: 926 words (11%)
                         Largest free fragment is 2048
               RAM used: 12 (3%) at main() level
                         27 (7%) worst case
               Stack:    5 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   309
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   XT 
.................... #use     delay(clock=4M) 
*
004B:  MOVLW  2C
004C:  MOVWF  04
004D:  BCF    03.7
004E:  MOVF   00,W
004F:  BTFSC  03.2
0050:  GOTO   05F
0051:  MOVLW  01
0052:  MOVWF  78
0053:  CLRF   77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 78,F
0057:  GOTO   053
0058:  MOVLW  4A
0059:  MOVWF  77
005A:  DECFSZ 77,F
005B:  GOTO   05A
005C:  GOTO   05D
005D:  DECFSZ 00,F
005E:  GOTO   051
005F:  RETURN
.................... #define LCD_DATA_PORT getenv("SFR:PORTD") 
.................... #define LCD_ENABLE_PIN  PIN_A3                                   
.................... #define LCD_RS_PIN      PIN_A5                                   
.................... #define LCD_RW_PIN      PIN_A2                                    
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C4:  BSF    08.4
....................    output_float(LCD_DATA5); 
00C5:  BSF    08.5
....................    output_float(LCD_DATA6); 
00C6:  BSF    08.6
....................    output_float(LCD_DATA7); 
00C7:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00C8:  BCF    03.5
00C9:  BSF    05.2
00CA:  BSF    03.5
00CB:  BCF    05.2
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_enable(1); 
00CD:  BCF    03.5
00CE:  BSF    05.3
00CF:  BSF    03.5
00D0:  BCF    05.3
....................    delay_cycles(1); 
00D1:  NOP
....................    high = lcd_read_nibble(); 
00D2:  BCF    03.5
00D3:  CALL   08B
00D4:  MOVF   78,W
00D5:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00D6:  BCF    05.3
00D7:  BSF    03.5
00D8:  BCF    05.3
....................    delay_cycles(1); 
00D9:  NOP
....................    lcd_output_enable(1); 
00DA:  BCF    03.5
00DB:  BSF    05.3
00DC:  BSF    03.5
00DD:  BCF    05.3
....................    delay_us(1); 
00DE:  NOP
....................    low = lcd_read_nibble(); 
00DF:  BCF    03.5
00E0:  CALL   08B
00E1:  MOVF   78,W
00E2:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
00E3:  BCF    05.3
00E4:  BSF    03.5
00E5:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E6:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00E7:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00E8:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00E9:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00EA:  BCF    03.5
00EB:  SWAPF  33,W
00EC:  MOVWF  77
00ED:  MOVLW  F0
00EE:  ANDWF  77,F
00EF:  MOVF   77,W
00F0:  IORWF  32,W
00F1:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
008B:  CLRF   34
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
008C:  BSF    03.5
008D:  BSF    08.4
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  08.4
0091:  MOVLW  01
0092:  IORWF  34,F
....................    n |= input(LCD_DATA5) << 1; 
0093:  BSF    03.5
0094:  BSF    08.5
0095:  MOVLW  00
0096:  BCF    03.5
0097:  BTFSC  08.5
0098:  MOVLW  01
0099:  MOVWF  77
009A:  BCF    03.0
009B:  RLF    77,F
009C:  MOVF   77,W
009D:  IORWF  34,F
....................    n |= input(LCD_DATA6) << 2; 
009E:  BSF    03.5
009F:  BSF    08.6
00A0:  MOVLW  00
00A1:  BCF    03.5
00A2:  BTFSC  08.6
00A3:  MOVLW  01
00A4:  MOVWF  77
00A5:  RLF    77,F
00A6:  RLF    77,F
00A7:  MOVLW  FC
00A8:  ANDWF  77,F
00A9:  MOVF   77,W
00AA:  IORWF  34,F
....................    n |= input(LCD_DATA7) << 3; 
00AB:  BSF    03.5
00AC:  BSF    08.7
00AD:  MOVLW  00
00AE:  BCF    03.5
00AF:  BTFSC  08.7
00B0:  MOVLW  01
00B1:  MOVWF  77
00B2:  RLF    77,F
00B3:  RLF    77,F
00B4:  RLF    77,F
00B5:  MOVLW  F8
00B6:  ANDWF  77,F
00B7:  MOVF   77,W
00B8:  IORWF  34,F
....................     
....................    return(n); 
00B9:  MOVF   34,W
00BA:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00BB:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0060:  BTFSC  33.0
0061:  GOTO   064
0062:  BCF    08.4
0063:  GOTO   065
0064:  BSF    08.4
0065:  BSF    03.5
0066:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0067:  BCF    03.5
0068:  BTFSC  33.1
0069:  GOTO   06C
006A:  BCF    08.5
006B:  GOTO   06D
006C:  BSF    08.5
006D:  BSF    03.5
006E:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
006F:  BCF    03.5
0070:  BTFSC  33.2
0071:  GOTO   074
0072:  BCF    08.6
0073:  GOTO   075
0074:  BSF    08.6
0075:  BSF    03.5
0076:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0077:  BCF    03.5
0078:  BTFSC  33.3
0079:  GOTO   07C
007A:  BCF    08.7
007B:  GOTO   07D
007C:  BSF    08.7
007D:  BSF    03.5
007E:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
007F:  NOP
....................    lcd_output_enable(1); 
0080:  BCF    03.5
0081:  BSF    05.3
0082:  BSF    03.5
0083:  BCF    05.3
....................    delay_us(2); 
0084:  GOTO   085
....................    lcd_output_enable(0); 
0085:  BCF    03.5
0086:  BCF    05.3
0087:  BSF    03.5
0088:  BCF    05.3
.................... } 
0089:  BCF    03.5
008A:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00BC:  BSF    03.5
00BD:  BCF    05.3
....................    lcd_rs_tris(); 
00BE:  BCF    05.5
....................    lcd_rw_tris(); 
00BF:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00C0:  BCF    03.5
00C1:  BCF    05.5
00C2:  BSF    03.5
00C3:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00F2:  MOVF   78,W
00F3:  MOVWF  32
00F4:  BTFSS  32.7
00F5:  GOTO   0F8
00F6:  BSF    03.5
00F7:  GOTO   0C4
....................    lcd_output_rs(address); 
00F8:  MOVF   30,F
00F9:  BTFSS  03.2
00FA:  GOTO   0FD
00FB:  BCF    05.5
00FC:  GOTO   0FE
00FD:  BSF    05.5
00FE:  BSF    03.5
00FF:  BCF    05.5
....................    delay_cycles(1); 
0100:  NOP
....................    lcd_output_rw(0); 
0101:  BCF    03.5
0102:  BCF    05.2
0103:  BSF    03.5
0104:  BCF    05.2
....................    delay_cycles(1); 
0105:  NOP
....................    lcd_output_enable(0); 
0106:  BCF    03.5
0107:  BCF    05.3
0108:  BSF    03.5
0109:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
010A:  BCF    03.5
010B:  SWAPF  31,W
010C:  MOVWF  32
010D:  MOVLW  0F
010E:  ANDWF  32,F
010F:  MOVF   32,W
0110:  MOVWF  33
0111:  CALL   060
....................    lcd_send_nibble(n & 0xf); 
0112:  MOVF   31,W
0113:  ANDLW  0F
0114:  MOVWF  32
0115:  MOVWF  33
0116:  CALL   060
.................... } 
0117:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0118:  BSF    03.5
0119:  BCF    08.4
....................    output_drive(LCD_DATA5); 
011A:  BCF    08.5
....................    output_drive(LCD_DATA6); 
011B:  BCF    08.6
....................    output_drive(LCD_DATA7); 
011C:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
011D:  BCF    05.3
....................    lcd_rs_tris(); 
011E:  BCF    05.5
....................    lcd_rw_tris(); 
011F:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0120:  BCF    03.5
0121:  BCF    05.5
0122:  BSF    03.5
0123:  BCF    05.5
....................    lcd_output_rw(0); 
0124:  BCF    03.5
0125:  BCF    05.2
0126:  BSF    03.5
0127:  BCF    05.2
....................    lcd_output_enable(0); 
0128:  BCF    03.5
0129:  BCF    05.3
012A:  BSF    03.5
012B:  BCF    05.3
....................      
....................    delay_ms(15); 
012C:  MOVLW  0F
012D:  BCF    03.5
012E:  MOVWF  2C
012F:  CALL   04B
....................    for(i=1;i<=3;++i) 
0130:  MOVLW  01
0131:  MOVWF  27
0132:  MOVF   27,W
0133:  SUBLW  03
0134:  BTFSS  03.0
0135:  GOTO   140
....................    { 
....................        lcd_send_nibble(3); 
0136:  MOVLW  03
0137:  MOVWF  33
0138:  CALL   060
....................        lcd_send_nibble(0); 
0139:  CLRF   33
013A:  CALL   060
....................        delay_ms(5); 
013B:  MOVLW  05
013C:  MOVWF  2C
013D:  CALL   04B
....................    } 
013E:  INCF   27,F
013F:  GOTO   132
....................     
....................    lcd_send_nibble(2); 
0140:  MOVLW  02
0141:  MOVWF  33
0142:  CALL   060
....................    lcd_send_nibble(0); 
0143:  CLRF   33
0144:  CALL   060
....................    delay_ms(5); 
0145:  MOVLW  05
0146:  MOVWF  2C
0147:  CALL   04B
....................    for(i=0;i<=3;++i) 
0148:  CLRF   27
0149:  MOVF   27,W
014A:  SUBLW  03
014B:  BTFSS  03.0
014C:  GOTO   156
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
014D:  MOVF   27,W
014E:  CALL   004
014F:  MOVWF  28
0150:  CLRF   30
0151:  MOVF   28,W
0152:  MOVWF  31
0153:  CALL   0BC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0154:  INCF   27,F
0155:  GOTO   149
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0156:  BCF    0A.3
0157:  BCF    0A.4
0158:  GOTO   31F (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
01CE:  DECFSZ 2D,W
01CF:  GOTO   1D1
01D0:  GOTO   1D4
....................       address=LCD_LINE_TWO; 
01D1:  MOVLW  40
01D2:  MOVWF  2E
....................    else 
01D3:  GOTO   1D5
....................       address=0; 
01D4:  CLRF   2E
....................       
....................    address+=x-1; 
01D5:  MOVLW  01
01D6:  SUBWF  2C,W
01D7:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
01D8:  MOVF   2E,W
01D9:  IORLW  80
01DA:  MOVWF  2F
01DB:  CLRF   30
01DC:  MOVF   2F,W
01DD:  MOVWF  31
01DE:  CALL   0BC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
01DF:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
01E0:  MOVF   2B,W
01E1:  XORLW  07
01E2:  BTFSC  03.2
01E3:  GOTO   1EE
01E4:  XORLW  0B
01E5:  BTFSC  03.2
01E6:  GOTO   1F3
01E7:  XORLW  06
01E8:  BTFSC  03.2
01E9:  GOTO   1FB
01EA:  XORLW  02
01EB:  BTFSC  03.2
01EC:  GOTO   201
01ED:  GOTO   206
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01EE:  MOVLW  01
01EF:  MOVWF  2C
01F0:  MOVWF  2D
01F1:  CALL   1CE
01F2:  GOTO   20C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01F3:  CLRF   30
01F4:  MOVLW  01
01F5:  MOVWF  31
01F6:  CALL   0BC
....................                      delay_ms(2); 
01F7:  MOVLW  02
01F8:  MOVWF  2C
01F9:  CALL   04B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01FA:  GOTO   20C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01FB:  MOVLW  01
01FC:  MOVWF  2C
01FD:  MOVLW  02
01FE:  MOVWF  2D
01FF:  CALL   1CE
0200:  GOTO   20C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0201:  CLRF   30
0202:  MOVLW  10
0203:  MOVWF  31
0204:  CALL   0BC
0205:  GOTO   20C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0206:  MOVLW  01
0207:  MOVWF  30
0208:  MOVF   2B,W
0209:  MOVWF  31
020A:  CALL   0BC
020B:  GOTO   20C
....................      #endif 
....................    } 
.................... } 
020C:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "keypad.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     KBD_LIB.C by Redraven                         //// 
.................... ////                                                                   //// 
.................... ////                     Derived from KBDD.C                           //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81              // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83              // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... /* 
.................... //Keypad connection:   (for example column 0 is B0) 
....................  
.................... #define COL0 (1 << 0) // PIN_B0 
.................... #define COL1 (1 << 1) // PIN_B1 
.................... #define COL2 (1 << 2) // PIN_B2 
.................... #define COL3 (1 << 3) // PIN_B3 
....................  
.................... #define ROW0 (1 << 4) // PIN_B4 
.................... #define ROW1 (1 << 5) // PIN_B5 
.................... #define ROW2 (1 << 6) // PIN_B6 
.................... #define ROW3 (1 << 7) // PIN_B7 
.................... */ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................       ////////////////////// 
....................       //Keypad connection:// 
....................       ////////////////////// 
....................       //      rb7 --> X1    //               
....................       //      rb6 --> X2     // 
....................       //      rb5 --> X3     // 
....................       //      rb4 --> X4     // 
....................       //                    // 
....................       //      rb3 --> Y1     // 
....................       //      rb2 --> Y2     // 
....................       //      rb1 --> Y3     // 
....................       //      rb0 --> Y4     // 
....................       ////////////////////// 
....................  
.................... #define COL0 (1 << 4) // PIN_B4 
.................... #define COL1 (1 << 5) // PIN_B5 
.................... #define COL2 (1 << 6) // PIN_B6 
.................... #define COL3 (1 << 7) // PIN_B7 
....................  
.................... #define ROW0 (1 << 3) // PIN_B3 
.................... #define ROW1 (1 << 2) // PIN_B2 
.................... #define ROW2 (1 << 1) // PIN_B1 
.................... #define ROW3 (1 << 0) // PIN_B0 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
.................... void kbd_init() { 
.................... } 
*
0159:  BCF    0A.3
015A:  BCF    0A.4
015B:  GOTO   320 (RETURN)
....................  
.................... char kbd_getc( ) { 
....................    static byte kbd_call_count; 
*
0316:  BCF    03.5
0317:  CLRF   20
....................    static short int kbd_down; 
0318:  BCF    21.0
....................    static char last_key; 
0319:  CLRF   22
....................    static byte col; 
031A:  CLRF   23
....................  
....................    byte kchar; 
....................    byte row; 
....................  
....................    kchar='\0'; 
*
015C:  CLRF   27
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
015D:  INCF   20,F
015E:  MOVF   20,W
015F:  SUBLW  21
0160:  BTFSC  03.0
0161:  GOTO   1BD
....................        switch (col) { 
0162:  MOVF   23,W
0163:  ADDLW  FC
0164:  BTFSC  03.0
0165:  GOTO   180
0166:  ADDLW  04
0167:  GOTO   1C6
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0168:  MOVLW  EF
0169:  BSF    03.5
016A:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
016B:  BCF    03.5
016C:  MOVWF  06
....................                     break; 
016D:  GOTO   180
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
016E:  MOVLW  DF
016F:  BSF    03.5
0170:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0171:  BCF    03.5
0172:  MOVWF  06
....................                     break; 
0173:  GOTO   180
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0174:  MOVLW  BF
0175:  BSF    03.5
0176:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0177:  BCF    03.5
0178:  MOVWF  06
....................                     break; 
0179:  GOTO   180
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
017A:  MOVLW  7F
017B:  BSF    03.5
017C:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
017D:  BCF    03.5
017E:  MOVWF  06
....................                     break; 
017F:  GOTO   180
....................        } 
....................  
....................        if(kbd_down) { 
0180:  BTFSS  21.0
0181:  GOTO   18C
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
0182:  MOVF   06,W
0183:  ANDLW  0F
0184:  SUBLW  0F
0185:  BTFSS  03.2
0186:  GOTO   18B
....................            kbd_down=false; 
0187:  BCF    21.0
....................            kchar=last_key; 
0188:  MOVF   22,W
0189:  MOVWF  27
....................            last_key='\0'; 
018A:  CLRF   22
....................          } 
....................        } else { 
018B:  GOTO   1BC
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
018C:  MOVF   06,W
018D:  ANDLW  0F
018E:  SUBLW  0F
018F:  BTFSC  03.2
0190:  GOTO   1B7
....................              if((kbd & ROW0)==0) 
0191:  MOVF   06,W
0192:  ANDLW  08
0193:  BTFSS  03.2
0194:  GOTO   197
....................                row=0; 
0195:  CLRF   28
....................              else if((kbd & ROW1)==0) 
0196:  GOTO   1AB
0197:  MOVF   06,W
0198:  ANDLW  04
0199:  BTFSS  03.2
019A:  GOTO   19E
....................                row=1; 
019B:  MOVLW  01
019C:  MOVWF  28
....................              else if((kbd & ROW2)==0) 
019D:  GOTO   1AB
019E:  MOVF   06,W
019F:  ANDLW  02
01A0:  BTFSS  03.2
01A1:  GOTO   1A5
....................                row=2; 
01A2:  MOVLW  02
01A3:  MOVWF  28
....................              else if((kbd & ROW3)==0) 
01A4:  GOTO   1AB
01A5:  MOVF   06,W
01A6:  ANDLW  01
01A7:  BTFSS  03.2
01A8:  GOTO   1AB
....................                row=3; 
01A9:  MOVLW  03
01AA:  MOVWF  28
....................              last_key =KEYS[row][col]; 
01AB:  RLF    28,W
01AC:  MOVWF  77
01AD:  RLF    77,F
01AE:  MOVLW  FC
01AF:  ANDWF  77,F
01B0:  MOVF   77,W
01B1:  ADDWF  23,W
01B2:  CALL   00C
01B3:  MOVWF  78
01B4:  MOVWF  22
....................              kbd_down = true; 
01B5:  BSF    21.0
....................           } else { 
01B6:  GOTO   1BC
....................              ++col; 
01B7:  INCF   23,F
....................              if(col==4) 
01B8:  MOVF   23,W
01B9:  SUBLW  04
01BA:  BTFSC  03.2
....................                col=0; 
01BB:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01BC:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01BD:  MOVLW  FF
01BE:  BSF    03.5
01BF:  MOVWF  06
....................   return(kchar); 
01C0:  BCF    03.5
01C1:  MOVF   27,W
01C2:  MOVWF  78
.................... } 
01C3:  BCF    0A.3
01C4:  BCF    0A.4
01C5:  GOTO   327 (RETURN)
....................  
....................  
.................... #include "pwm.c" 
.................... #include "pwm.h" 
.................... #ifndef __SPI__ 
.................... #define __SPI__ 
....................  
.................... #define PWM_PRESCALER   T2_DIV_BY_16 
.................... #define PWM_POSTSCALER  1 
.................... #define PWM_PERIOD      62  
....................  
.................... #BYTE CCPR1L = 0x15 
.................... #BYTE PR2 = 0x92 
....................  
.................... struct  { 
....................    unsigned char T2CKPS0   :1; 
....................    unsigned char T2CKPS1   :1; 
....................    unsigned char TMR2ON    :1; 
....................    unsigned char TOUTPS0   :1; 
....................    unsigned char TOUTPS1   :1; 
....................    unsigned char TOUTPS2   :1; 
....................    unsigned char TOUTPS3   :1; 
.................... } T2CONbits; 
.................... #byte T2CONbits =  0x12 
....................  
.................... struct  { 
....................    unsigned char CCP1M0 :1; 
....................    unsigned char CCP1M1 :1; 
....................    unsigned char CCP1M2 :1; 
....................    unsigned char CCP1M3 :1; 
....................    unsigned char CCP1Y  :1; 
....................    unsigned char CCP1X  :1; 
.................... } CCP1CONbits; 
.................... #byte CCP1CONbits  =  0x17 
....................  
.................... struct  { 
....................    unsigned char TRISC0 :1; 
....................    unsigned char TRISC1 :1; 
....................    unsigned char TRISC2 :1; 
....................    unsigned char TRISC3 :1; 
....................    unsigned char TRISC4 :1; 
....................    unsigned char TRISC5 :1; 
....................    unsigned char TRISC6 :1; 
....................    unsigned char TRISC7 :1; 
.................... } TRISCbits; 
.................... #byte TRISCbits    =  0x87   
....................  
.................... void SetPWM1(int16 DutyCycle); 
.................... void pwm_init(void); 
.................... void pwm_init_register(void); 
....................  
.................... #endif 
....................  
....................  
.................... void SetPWM1(int16 DutyCycle){ 
....................  
....................     CCPR1L = (DutyCycle>>2); 
*
0253:  RRF    28,W
0254:  MOVWF  7A
0255:  RRF    27,W
0256:  MOVWF  79
0257:  RRF    7A,F
0258:  RRF    79,F
0259:  MOVF   79,W
025A:  MOVWF  15
....................  
....................     CCP1CONbits.CCP1X = ((DutyCycle & 2)>>1); 
025B:  MOVF   27,W
025C:  ANDLW  02
025D:  MOVWF  29
025E:  CLRF   2A
025F:  BCF    03.0
0260:  RRF    2A,W
0261:  MOVWF  7A
0262:  RRF    29,W
0263:  MOVWF  79
0264:  MOVWF  78
0265:  BCF    17.5
0266:  BTFSC  78.0
0267:  BSF    17.5
....................     CCP1CONbits.CCP1Y = (DutyCycle & 1); 
0268:  MOVF   27,W
0269:  ANDLW  01
026A:  MOVWF  77
026B:  CLRF   7A
026C:  BCF    17.4
026D:  BTFSC  77.0
026E:  BSF    17.4
.................... } 
026F:  RETURN
....................  
.................... void pwm_init(){ 
....................    set_tris_c( 0b00000000 ); 
*
0034:  MOVLW  00
0035:  BSF    03.5
0036:  MOVWF  07
0037:  BCF    03.5
0038:  MOVWF  24
....................    setup_timer_2( PWM_PRESCALER ,PWM_PERIOD, PWM_POSTSCALER);    
0039:  MOVWF  78
003A:  IORLW  06
003B:  MOVWF  12
003C:  MOVLW  3E
003D:  BSF    03.5
003E:  MOVWF  12
....................    // PWM Period = (62+1)*4*(1/4Mhz)*16 = 1Khz 
....................    setup_ccp1(CCP_PWM);                // Enabled PWM1 
003F:  BCF    03.5
0040:  BCF    24.2
0041:  MOVF   24,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BCF    07.2
0046:  MOVLW  0C
0047:  MOVWF  17
.................... } 
0048:  BCF    0A.3
0049:  BCF    0A.4
004A:  GOTO   31E (RETURN)
....................  
.................... void pwm_init_register(void){ 
....................  
....................    // CONFIGURACION DEL PERIODO DE TIMER2 
....................    PR2 = 62; 
....................    // CICLO DE TRABAJO - 50% -> 0b0001111101 
....................    CCPR1L = 0b00011111; 
....................    CCP1CONbits.CCP1X = 0; 
....................    CCP1CONbits.CCP1Y = 1; 
....................    // PIN CCP1 COMO SALIDA 
....................    TRISCbits.TRISC2 = 0; 
....................    //  PRESCALER TIMER2 16 
....................    T2CONbits.T2CKPS0 = 1; 
....................    T2CONbits.T2CKPS1 = 1; 
....................    // MODULO CCPP EN MODO PWM 
....................    CCP1CONbits.CCP1M3 = 1; 
....................    CCP1CONbits.CCP1M2 = 1; 
....................    CCP1CONbits.CCP1M1 = 0; 
....................    CCP1CONbits.CCP1M0 = 0; 
....................    // HABILITO TIMER2 
....................    T2CONbits.TMR2ON = 1; 
....................  
....................  
.................... } 
....................  
....................  
.................... #define  MOTOR1A  PIN_C0 
.................... #define  MOTOR1B  PIN_C1 
....................  
.................... void main(){ 
*
0309:  CLRF   04
030A:  BCF    03.7
030B:  MOVLW  1F
030C:  ANDWF  03,F
030D:  MOVLW  FF
030E:  MOVWF  24
030F:  BSF    03.5
0310:  BSF    1F.0
0311:  BSF    1F.1
0312:  BSF    1F.2
0313:  BCF    1F.3
0314:  MOVLW  07
0315:  MOVWF  1C
*
031B:  MOVLW  7D
031C:  MOVWF  26
....................    char tecla; 
....................     
....................    int duty = 125; 
....................    pwm_init(); // PWM OUTPUT PIN_C2 
031D:  GOTO   034
....................    lcd_init(); 
031E:  GOTO   118
....................    kbd_init(); 
031F:  GOTO   159
....................    port_b_pullups(true); 
0320:  BSF    03.5
0321:  BCF    01.7
....................     
....................    set_tris_c(0b10000000); 
0322:  MOVLW  80
0323:  MOVWF  07
0324:  BCF    03.5
0325:  MOVWF  24
....................     
....................    for(;;){ 
....................       tecla = kbd_getc();  
0326:  GOTO   15C
0327:  MOVF   78,W
0328:  MOVWF  25
....................       if(tecla != 0){ 
0329:  MOVF   25,F
032A:  BTFSC  03.2
032B:  GOTO   39C
....................          if(tecla == 'A'){ 
032C:  MOVF   25,W
032D:  SUBLW  41
032E:  BTFSS  03.2
032F:  GOTO   347
....................             lcd_gotoxy(1,1); 
0330:  MOVLW  01
0331:  MOVWF  2C
0332:  MOVWF  2D
0333:  CALL   1CE
....................             printf(lcd_putc,"GiroDerecho"); 
0334:  MOVLW  20
0335:  BSF    03.6
0336:  MOVWF  0D
0337:  MOVLW  00
0338:  MOVWF  0F
0339:  BCF    03.6
033A:  CALL   20D
....................             output_high( MOTOR1A ); output_low( MOTOR1B );    
033B:  BCF    24.0
033C:  MOVF   24,W
033D:  BSF    03.5
033E:  MOVWF  07
033F:  BCF    03.5
0340:  BSF    07.0
0341:  BCF    24.1
0342:  MOVF   24,W
0343:  BSF    03.5
0344:  MOVWF  07
0345:  BCF    03.5
0346:  BCF    07.1
....................          } 
....................          if(tecla == 'B'){ 
0347:  MOVF   25,W
0348:  SUBLW  42
0349:  BTFSS  03.2
034A:  GOTO   362
....................             lcd_gotoxy(1,1); 
034B:  MOVLW  01
034C:  MOVWF  2C
034D:  MOVWF  2D
034E:  CALL   1CE
....................             printf(lcd_putc,"GiroDerecho"); 
034F:  MOVLW  26
0350:  BSF    03.6
0351:  MOVWF  0D
0352:  MOVLW  00
0353:  MOVWF  0F
0354:  BCF    03.6
0355:  CALL   20D
....................             output_low( MOTOR1A ); output_high( MOTOR1B );      
0356:  BCF    24.0
0357:  MOVF   24,W
0358:  BSF    03.5
0359:  MOVWF  07
035A:  BCF    03.5
035B:  BCF    07.0
035C:  BCF    24.1
035D:  MOVF   24,W
035E:  BSF    03.5
035F:  MOVWF  07
0360:  BCF    03.5
0361:  BSF    07.1
....................          } 
....................          if(tecla == 'C'){ 
0362:  MOVF   25,W
0363:  SUBLW  43
0364:  BTFSS  03.2
0365:  GOTO   37F
....................             duty++; 
0366:  INCF   26,F
....................             SetPWM1( duty );  
0367:  CLRF   28
0368:  MOVF   26,W
0369:  MOVWF  27
036A:  CALL   253
....................             lcd_gotoxy(1,2); 
036B:  MOVLW  01
036C:  MOVWF  2C
036D:  MOVLW  02
036E:  MOVWF  2D
036F:  CALL   1CE
....................             printf(lcd_putc,"duty:%u",duty);         
0370:  MOVLW  2C
0371:  BSF    03.6
0372:  MOVWF  0D
0373:  MOVLW  00
0374:  MOVWF  0F
0375:  BCF    03.0
0376:  MOVLW  05
0377:  BCF    03.6
0378:  MOVWF  27
0379:  CALL   270
037A:  MOVF   26,W
037B:  MOVWF  27
037C:  MOVLW  1B
037D:  MOVWF  28
037E:  CALL   2D4
....................          } 
....................          if(tecla == 'D'){ 
037F:  MOVF   25,W
0380:  SUBLW  44
0381:  BTFSS  03.2
0382:  GOTO   39C
....................             duty--; 
0383:  DECF   26,F
....................             SetPWM1( duty ); 
0384:  CLRF   28
0385:  MOVF   26,W
0386:  MOVWF  27
0387:  CALL   253
....................             lcd_gotoxy(1,2); 
0388:  MOVLW  01
0389:  MOVWF  2C
038A:  MOVLW  02
038B:  MOVWF  2D
038C:  CALL   1CE
....................             printf(lcd_putc,"duty:%u",duty);   
038D:  MOVLW  30
038E:  BSF    03.6
038F:  MOVWF  0D
0390:  MOVLW  00
0391:  MOVWF  0F
0392:  BCF    03.0
0393:  MOVLW  05
0394:  BCF    03.6
0395:  MOVWF  27
0396:  CALL   270
0397:  MOVF   26,W
0398:  MOVWF  27
0399:  MOVLW  1B
039A:  MOVWF  28
039B:  CALL   2D4
....................          } 
....................       } 
....................    } 
039C:  GOTO   326
.................... } 
....................  
....................  
039D:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
