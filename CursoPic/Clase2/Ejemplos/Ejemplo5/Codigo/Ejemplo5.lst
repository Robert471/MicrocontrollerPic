CCS PCM C Compiler, Version 4.057, 10717               30-nov-16 21:08

               Filename: D:\LaboTEC\Cursos\PIC\Clases\Clase2\Ejemplos\Ejemplo5\Ejemplo5.lst

               ROM used: 458 words (6%)
                         Largest free fragment is 2048
               RAM used: 12 (3%) at main() level
                         22 (6%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   17D
0003:  NOP
.................... #include <16f877a.h>  
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=4M)  
*
004A:  MOVLW  27
004B:  MOVWF  04
004C:  BCF    03.7
004D:  MOVF   00,W
004E:  BTFSC  03.2
004F:  GOTO   05E
0050:  MOVLW  01
0051:  MOVWF  78
0052:  CLRF   77
0053:  DECFSZ 77,F
0054:  GOTO   053
0055:  DECFSZ 78,F
0056:  GOTO   052
0057:  MOVLW  4A
0058:  MOVWF  77
0059:  DECFSZ 77,F
005A:  GOTO   059
005B:  GOTO   05C
005C:  DECFSZ 00,F
005D:  GOTO   050
005E:  RETLW  00
.................... #fuses XT  
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
006C:  MOVLW  F0
006D:  BSF    03.5
006E:  MOVWF  08
....................       lcd.rw = 1; 
006F:  BCF    03.5
0070:  BSF    08.2
....................       delay_cycles(1); 
0071:  NOP
....................       lcd.enable = 1; 
0072:  BSF    08.0
....................       delay_cycles(1); 
0073:  NOP
....................       high = lcd.data; 
0074:  MOVF   08,W
0075:  SWAPF  08,W
0076:  ANDLW  0F
0077:  MOVWF  2E
....................       lcd.enable = 0; 
0078:  BCF    08.0
....................       delay_cycles(1); 
0079:  NOP
....................       lcd.enable = 1; 
007A:  BSF    08.0
....................       delay_us(1); 
007B:  NOP
....................       low = lcd.data; 
007C:  MOVF   08,W
007D:  SWAPF  08,W
007E:  ANDLW  0F
007F:  MOVWF  2D
....................       lcd.enable = 0; 
0080:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0081:  MOVLW  00
0082:  BSF    03.5
0083:  MOVWF  08
....................       return( (high<<4) | low); 
0084:  BCF    03.5
0085:  SWAPF  2E,W
0086:  MOVWF  77
0087:  MOVLW  F0
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  2D,W
008B:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
005F:  SWAPF  2E,W
0060:  ANDLW  F0
0061:  MOVWF  77
0062:  MOVLW  0F
0063:  ANDWF  08,W
0064:  IORWF  77,W
0065:  MOVWF  08
....................       delay_cycles(1); 
0066:  NOP
....................       lcd.enable = 1; 
0067:  BSF    08.0
....................       delay_us(2); 
0068:  GOTO   069
....................       lcd.enable = 0; 
0069:  BCF    08.0
.................... } 
006A:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
006B:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
008C:  MOVF   78,W
008D:  MOVWF  2D
008E:  BTFSC  2D.7
008F:  GOTO   06C
....................       lcd.rs = address; 
0090:  BTFSS  2B.0
0091:  BCF    08.1
0092:  BTFSC  2B.0
0093:  BSF    08.1
....................       delay_cycles(1); 
0094:  NOP
....................       lcd.rw = 0; 
0095:  BCF    08.2
....................       delay_cycles(1); 
0096:  NOP
....................       lcd.enable = 0; 
0097:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
0098:  SWAPF  2C,W
0099:  MOVWF  2D
009A:  MOVLW  0F
009B:  ANDWF  2D,F
009C:  MOVF   2D,W
009D:  MOVWF  2E
009E:  CALL   05F
....................       lcd_send_nibble(n & 0xf); 
009F:  MOVF   2C,W
00A0:  ANDLW  0F
00A1:  MOVWF  2D
00A2:  MOVWF  2E
00A3:  CALL   05F
.................... } 
00A4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00A5:  MOVLW  00
00A6:  BSF    03.5
00A7:  MOVWF  08
....................     lcd.rs = 0; 
00A8:  BCF    03.5
00A9:  BCF    08.1
....................     lcd.rw = 0; 
00AA:  BCF    08.2
....................     lcd.enable = 0; 
00AB:  BCF    08.0
....................     delay_ms(15); 
00AC:  MOVLW  0F
00AD:  MOVWF  27
00AE:  CALL   04A
....................     for(i=1;i<=3;++i) { 
00AF:  MOVLW  01
00B0:  MOVWF  25
00B1:  MOVF   25,W
00B2:  SUBLW  03
00B3:  BTFSS  03.0
00B4:  GOTO   0BD
....................        lcd_send_nibble(3); 
00B5:  MOVLW  03
00B6:  MOVWF  2E
00B7:  CALL   05F
....................        delay_ms(5); 
00B8:  MOVLW  05
00B9:  MOVWF  27
00BA:  CALL   04A
....................     } 
00BB:  INCF   25,F
00BC:  GOTO   0B1
....................     lcd_send_nibble(2); 
00BD:  MOVLW  02
00BE:  MOVWF  2E
00BF:  CALL   05F
....................     for(i=0;i<=3;++i) 
00C0:  CLRF   25
00C1:  MOVF   25,W
00C2:  SUBLW  03
00C3:  BTFSS  03.0
00C4:  GOTO   0CE
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C5:  MOVF   25,W
00C6:  CALL   004
00C7:  MOVWF  26
00C8:  CLRF   2B
00C9:  MOVF   26,W
00CA:  MOVWF  2C
00CB:  CALL   06B
00CC:  INCF   25,F
00CD:  GOTO   0C1
.................... } 
00CE:  BCF    0A.3
00CF:  BCF    0A.4
00D0:  GOTO   18E (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00D4:  DECFSZ 28,W
00D5:  GOTO   0D7
00D6:  GOTO   0DA
....................      address=lcd_line_two; 
00D7:  MOVLW  40
00D8:  MOVWF  29
....................    else 
00D9:  GOTO   0DB
....................      address=0; 
00DA:  CLRF   29
....................    address+=x-1; 
00DB:  MOVLW  01
00DC:  SUBWF  27,W
00DD:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
00DE:  MOVF   29,W
00DF:  IORLW  80
00E0:  MOVWF  2A
00E1:  CLRF   2B
00E2:  MOVF   2A,W
00E3:  MOVWF  2C
00E4:  CALL   06B
.................... } 
00E5:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
00E6:  MOVF   26,W
00E7:  XORLW  0C
00E8:  BTFSC  03.2
00E9:  GOTO   0F1
00EA:  XORLW  06
00EB:  BTFSC  03.2
00EC:  GOTO   0F9
00ED:  XORLW  02
00EE:  BTFSC  03.2
00EF:  GOTO   0FF
00F0:  GOTO   104
....................      case '\f'   : lcd_send_byte(0,1); 
00F1:  CLRF   2B
00F2:  MOVLW  01
00F3:  MOVWF  2C
00F4:  CALL   06B
....................                    delay_ms(2); 
00F5:  MOVLW  02
00F6:  MOVWF  27
00F7:  CALL   04A
....................                                            break; 
00F8:  GOTO   10A
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00F9:  MOVLW  01
00FA:  MOVWF  27
00FB:  MOVLW  02
00FC:  MOVWF  28
00FD:  CALL   0D4
00FE:  GOTO   10A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00FF:  CLRF   2B
0100:  MOVLW  10
0101:  MOVWF  2C
0102:  CALL   06B
0103:  GOTO   10A
....................      default     : lcd_send_byte(1,c);     break; 
0104:  MOVLW  01
0105:  MOVWF  2B
0106:  MOVF   26,W
0107:  MOVWF  2C
0108:  CALL   06B
0109:  GOTO   10A
....................    } 
.................... } 
010A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #include "keypad.c"  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     KBD_LIB.C by Redraven                         //// 
.................... ////                                                                   //// 
.................... ////                     Derived from KBDD.C                           //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81              // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83              // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... /* 
.................... //Keypad connection:   (for example column 0 is B0) 
....................  
.................... #define COL0 (1 << 0) // PIN_B0 
.................... #define COL1 (1 << 1) // PIN_B1 
.................... #define COL2 (1 << 2) // PIN_B2 
.................... #define COL3 (1 << 3) // PIN_B3 
....................  
.................... #define ROW0 (1 << 4) // PIN_B4 
.................... #define ROW1 (1 << 5) // PIN_B5 
.................... #define ROW2 (1 << 6) // PIN_B6 
.................... #define ROW3 (1 << 7) // PIN_B7 
.................... */ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................       ////////////////////// 
....................       //Keypad connection:// 
....................       ////////////////////// 
....................       //      rb7 --> X1    //               
....................       //      rb6 --> X2     // 
....................       //      rb5 --> X3     // 
....................       //      rb4 --> X4     // 
....................       //                    // 
....................       //      rb3 --> Y1     // 
....................       //      rb2 --> Y2     // 
....................       //      rb1 --> Y3     // 
....................       //      rb0 --> Y4     // 
....................       ////////////////////// 
....................  
.................... #define COL0 (1 << 4) // PIN_B4 
.................... #define COL1 (1 << 5) // PIN_B5 
.................... #define COL2 (1 << 6) // PIN_B6 
.................... #define COL3 (1 << 7) // PIN_B7 
....................  
.................... #define ROW0 (1 << 0) // PIN_B0 
.................... #define ROW1 (1 << 1) // PIN_B1 
.................... #define ROW2 (1 << 2) // PIN_B2 
.................... #define ROW3 (1 << 3) // PIN_B3 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
.................... void kbd_init() { 
.................... } 
*
00D1:  BCF    0A.3
00D2:  BCF    0A.4
00D3:  GOTO   18F (RETURN)
....................  
.................... char kbd_getc( ) { 
....................    static byte kbd_call_count; 
*
0188:  BCF    03.5
0189:  CLRF   20
....................    static short int kbd_down; 
018A:  BCF    21.0
....................    static char last_key; 
018B:  CLRF   22
....................    static byte col; 
018C:  CLRF   23
....................  
....................    byte kchar; 
....................    byte row; 
....................  
....................    kchar='\0'; 
*
010B:  CLRF   25
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
010C:  INCF   20,F
010D:  MOVF   20,W
010E:  SUBLW  21
010F:  BTFSC  03.0
0110:  GOTO   16C
....................        switch (col) { 
0111:  MOVF   23,W
0112:  ADDLW  FC
0113:  BTFSC  03.0
0114:  GOTO   12F
0115:  ADDLW  04
0116:  GOTO   175
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0117:  MOVLW  EF
0118:  BSF    03.5
0119:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
011A:  BCF    03.5
011B:  MOVWF  06
....................                     break; 
011C:  GOTO   12F
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
011D:  MOVLW  DF
011E:  BSF    03.5
011F:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0120:  BCF    03.5
0121:  MOVWF  06
....................                     break; 
0122:  GOTO   12F
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0123:  MOVLW  BF
0124:  BSF    03.5
0125:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0126:  BCF    03.5
0127:  MOVWF  06
....................                     break; 
0128:  GOTO   12F
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
0129:  MOVLW  7F
012A:  BSF    03.5
012B:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
012C:  BCF    03.5
012D:  MOVWF  06
....................                     break; 
012E:  GOTO   12F
....................        } 
....................  
....................        if(kbd_down) { 
012F:  BTFSS  21.0
0130:  GOTO   13B
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
0131:  MOVF   06,W
0132:  ANDLW  0F
0133:  SUBLW  0F
0134:  BTFSS  03.2
0135:  GOTO   13A
....................            kbd_down=false; 
0136:  BCF    21.0
....................            kchar=last_key; 
0137:  MOVF   22,W
0138:  MOVWF  25
....................            last_key='\0'; 
0139:  CLRF   22
....................          } 
....................        } else { 
013A:  GOTO   16B
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
013B:  MOVF   06,W
013C:  ANDLW  0F
013D:  SUBLW  0F
013E:  BTFSC  03.2
013F:  GOTO   166
....................              if((kbd & ROW0)==0) 
0140:  MOVF   06,W
0141:  ANDLW  01
0142:  BTFSS  03.2
0143:  GOTO   146
....................                row=0; 
0144:  CLRF   26
....................              else if((kbd & ROW1)==0) 
0145:  GOTO   15A
0146:  MOVF   06,W
0147:  ANDLW  02
0148:  BTFSS  03.2
0149:  GOTO   14D
....................                row=1; 
014A:  MOVLW  01
014B:  MOVWF  26
....................              else if((kbd & ROW2)==0) 
014C:  GOTO   15A
014D:  MOVF   06,W
014E:  ANDLW  04
014F:  BTFSS  03.2
0150:  GOTO   154
....................                row=2; 
0151:  MOVLW  02
0152:  MOVWF  26
....................              else if((kbd & ROW3)==0) 
0153:  GOTO   15A
0154:  MOVF   06,W
0155:  ANDLW  08
0156:  BTFSS  03.2
0157:  GOTO   15A
....................                row=3; 
0158:  MOVLW  03
0159:  MOVWF  26
....................              last_key =KEYS[row][col]; 
015A:  RLF    26,W
015B:  MOVWF  77
015C:  RLF    77,F
015D:  MOVLW  FC
015E:  ANDWF  77,F
015F:  MOVF   77,W
0160:  ADDWF  23,W
0161:  CALL   00C
0162:  MOVWF  78
0163:  MOVWF  22
....................              kbd_down = true; 
0164:  BSF    21.0
....................           } else { 
0165:  GOTO   16B
....................              ++col; 
0166:  INCF   23,F
....................              if(col==4) 
0167:  MOVF   23,W
0168:  SUBLW  04
0169:  BTFSC  03.2
....................                col=0; 
016A:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
016B:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
016C:  MOVLW  FF
016D:  BSF    03.5
016E:  MOVWF  06
....................   return(kchar); 
016F:  BCF    03.5
0170:  MOVF   25,W
0171:  MOVWF  78
.................... } 
0172:  BCF    0A.3
0173:  BCF    0A.4
0174:  GOTO   1B2 (RETURN)
....................  
....................  
....................  
.................... void main(void){   
*
017D:  CLRF   04
017E:  BCF    03.7
017F:  MOVLW  1F
0180:  ANDWF  03,F
0181:  BSF    03.5
0182:  BSF    1F.0
0183:  BSF    1F.1
0184:  BSF    1F.2
0185:  BCF    1F.3
0186:  MOVLW  07
0187:  MOVWF  1C
....................    char c;      
....................    lcd_init();  
*
018D:  GOTO   0A5
....................    kbd_init();  
018E:  GOTO   0D1
....................    port_b_pullups(True);   
018F:  BSF    03.5
0190:  BCF    01.7
....................    lcd_gotoxy(1,1); 
0191:  MOVLW  01
0192:  BCF    03.5
0193:  MOVWF  27
0194:  MOVWF  28
0195:  CALL   0D4
....................    printf(lcd_putc,"Presionar"); 
0196:  CLRF   25
0197:  MOVF   25,W
0198:  CALL   020
0199:  INCF   25,F
019A:  MOVWF  77
019B:  MOVWF  26
019C:  CALL   0E6
019D:  MOVLW  09
019E:  SUBWF  25,W
019F:  BTFSS  03.2
01A0:  GOTO   197
....................    lcd_gotoxy(1,2); 
01A1:  MOVLW  01
01A2:  MOVWF  27
01A3:  MOVLW  02
01A4:  MOVWF  28
01A5:  CALL   0D4
....................    printf(lcd_putc,"Una tecla");   
01A6:  CLRF   25
01A7:  MOVF   25,W
01A8:  CALL   02E
01A9:  INCF   25,F
01AA:  MOVWF  77
01AB:  MOVWF  26
01AC:  CALL   0E6
01AD:  MOVLW  09
01AE:  SUBWF  25,W
01AF:  BTFSS  03.2
01B0:  GOTO   1A7
....................    for(;;){          
....................       c=kbd_getc();   
01B1:  GOTO   10B
01B2:  MOVF   78,W
01B3:  MOVWF  24
....................       if(c != 0){ 
01B4:  MOVF   24,F
01B5:  BTFSC  03.2
01B6:  GOTO   1C8
....................          lcd_putc('\f'); 
01B7:  MOVLW  0C
01B8:  MOVWF  26
01B9:  CALL   0E6
....................          printf(lcd_putc,"letra: %c",c);         
01BA:  CLRF   25
01BB:  MOVF   25,W
01BC:  CALL   03C
01BD:  INCF   25,F
01BE:  MOVWF  77
01BF:  MOVWF  26
01C0:  CALL   0E6
01C1:  MOVLW  07
01C2:  SUBWF  25,W
01C3:  BTFSS  03.2
01C4:  GOTO   1BB
01C5:  MOVF   24,W
01C6:  MOVWF  26
01C7:  CALL   0E6
....................       } 
....................    } 
01C8:  GOTO   1B1
.................... } 
....................  
....................  
....................  
01C9:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
