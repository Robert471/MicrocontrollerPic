CCS PCM C Compiler, Version 4.114, 93465053               12-dic-16 12:49

               Filename: C:\Users\COMPUTADORA\Desktop\Core_LaboTEC\10_Ultrasound\main.lst

               ROM used: 1105 words (13%)
                         Largest free fragment is 2048
               RAM used: 17 (5%) at main() level
                         42 (11%) worst case
               Stack:    5 locations

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   408
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses XT 
.................... #use delay(clock=4M) 
*
0020:  MOVLW  39
0021:  MOVWF  04
0022:  BCF    03.7
0023:  MOVF   00,W
0024:  BTFSC  03.2
0025:  GOTO   034
0026:  MOVLW  01
0027:  MOVWF  78
0028:  CLRF   77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  DECFSZ 78,F
002C:  GOTO   028
002D:  MOVLW  4A
002E:  MOVWF  77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  GOTO   032
0032:  DECFSZ 00,F
0033:  GOTO   026
0034:  RETURN
.................... #define LCD_DATA_PORT getenv("SFR:PORTD") 
.................... #define LCD_ENABLE_PIN  PIN_A3                                   
.................... #define LCD_RS_PIN      PIN_A5                                   
.................... #define LCD_RW_PIN      PIN_A2                                    
.................... #define LCD_DATA4       PIN_D4 
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0099:  BSF    08.4
....................    output_float(LCD_DATA5); 
009A:  BSF    08.5
....................    output_float(LCD_DATA6); 
009B:  BSF    08.6
....................    output_float(LCD_DATA7); 
009C:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
009D:  BCF    03.5
009E:  BSF    05.2
009F:  BSF    03.5
00A0:  BCF    05.2
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    05.3
00A4:  BSF    03.5
00A5:  BCF    05.3
....................    delay_cycles(1); 
00A6:  NOP
....................    high = lcd_read_nibble(); 
00A7:  BCF    03.5
00A8:  CALL   060
00A9:  MOVF   78,W
00AA:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    05.3
00AC:  BSF    03.5
00AD:  BCF    05.3
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_enable(1); 
00AF:  BCF    03.5
00B0:  BSF    05.3
00B1:  BSF    03.5
00B2:  BCF    05.3
....................    delay_us(1); 
00B3:  NOP
....................    low = lcd_read_nibble(); 
00B4:  BCF    03.5
00B5:  CALL   060
00B6:  MOVF   78,W
00B7:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
00B8:  BCF    05.3
00B9:  BSF    03.5
00BA:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00BB:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00BC:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00BD:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00BE:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BF:  BCF    03.5
00C0:  SWAPF  40,W
00C1:  MOVWF  77
00C2:  MOVLW  F0
00C3:  ANDWF  77,F
00C4:  MOVF   77,W
00C5:  IORWF  3F,W
00C6:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0060:  CLRF   41
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0061:  BSF    03.5
0062:  BSF    08.4
0063:  MOVLW  00
0064:  BCF    03.5
0065:  BTFSC  08.4
0066:  MOVLW  01
0067:  IORWF  41,F
....................    n |= input(LCD_DATA5) << 1; 
0068:  BSF    03.5
0069:  BSF    08.5
006A:  MOVLW  00
006B:  BCF    03.5
006C:  BTFSC  08.5
006D:  MOVLW  01
006E:  MOVWF  77
006F:  BCF    03.0
0070:  RLF    77,F
0071:  MOVF   77,W
0072:  IORWF  41,F
....................    n |= input(LCD_DATA6) << 2; 
0073:  BSF    03.5
0074:  BSF    08.6
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.6
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  MOVLW  FC
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  41,F
....................    n |= input(LCD_DATA7) << 3; 
0080:  BSF    03.5
0081:  BSF    08.7
0082:  MOVLW  00
0083:  BCF    03.5
0084:  BTFSC  08.7
0085:  MOVLW  01
0086:  MOVWF  77
0087:  RLF    77,F
0088:  RLF    77,F
0089:  RLF    77,F
008A:  MOVLW  F8
008B:  ANDWF  77,F
008C:  MOVF   77,W
008D:  IORWF  41,F
....................     
....................    return(n); 
008E:  MOVF   41,W
008F:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
0090:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0035:  BTFSC  40.0
0036:  GOTO   039
0037:  BCF    08.4
0038:  GOTO   03A
0039:  BSF    08.4
003A:  BSF    03.5
003B:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
003C:  BCF    03.5
003D:  BTFSC  40.1
003E:  GOTO   041
003F:  BCF    08.5
0040:  GOTO   042
0041:  BSF    08.5
0042:  BSF    03.5
0043:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0044:  BCF    03.5
0045:  BTFSC  40.2
0046:  GOTO   049
0047:  BCF    08.6
0048:  GOTO   04A
0049:  BSF    08.6
004A:  BSF    03.5
004B:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
004C:  BCF    03.5
004D:  BTFSC  40.3
004E:  GOTO   051
004F:  BCF    08.7
0050:  GOTO   052
0051:  BSF    08.7
0052:  BSF    03.5
0053:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BCF    03.5
0056:  BSF    05.3
0057:  BSF    03.5
0058:  BCF    05.3
....................    delay_us(2); 
0059:  GOTO   05A
....................    lcd_output_enable(0); 
005A:  BCF    03.5
005B:  BCF    05.3
005C:  BSF    03.5
005D:  BCF    05.3
.................... } 
005E:  BCF    03.5
005F:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0091:  BSF    03.5
0092:  BCF    05.3
....................    lcd_rs_tris(); 
0093:  BCF    05.5
....................    lcd_rw_tris(); 
0094:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0095:  BCF    03.5
0096:  BCF    05.5
0097:  BSF    03.5
0098:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C7:  MOVF   78,W
00C8:  MOVWF  3F
00C9:  BTFSS  3F.7
00CA:  GOTO   0CD
00CB:  BSF    03.5
00CC:  GOTO   099
....................    lcd_output_rs(address); 
00CD:  MOVF   3D,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D2
00D0:  BCF    05.5
00D1:  GOTO   0D3
00D2:  BSF    05.5
00D3:  BSF    03.5
00D4:  BCF    05.5
....................    delay_cycles(1); 
00D5:  NOP
....................    lcd_output_rw(0); 
00D6:  BCF    03.5
00D7:  BCF    05.2
00D8:  BSF    03.5
00D9:  BCF    05.2
....................    delay_cycles(1); 
00DA:  NOP
....................    lcd_output_enable(0); 
00DB:  BCF    03.5
00DC:  BCF    05.3
00DD:  BSF    03.5
00DE:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
00DF:  BCF    03.5
00E0:  SWAPF  3E,W
00E1:  MOVWF  3F
00E2:  MOVLW  0F
00E3:  ANDWF  3F,F
00E4:  MOVF   3F,W
00E5:  MOVWF  40
00E6:  CALL   035
....................    lcd_send_nibble(n & 0xf); 
00E7:  MOVF   3E,W
00E8:  ANDLW  0F
00E9:  MOVWF  3F
00EA:  MOVWF  40
00EB:  CALL   035
.................... } 
00EC:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00ED:  BSF    03.5
00EE:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00EF:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F0:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F1:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F2:  BCF    05.3
....................    lcd_rs_tris(); 
00F3:  BCF    05.5
....................    lcd_rw_tris(); 
00F4:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00F5:  BCF    03.5
00F6:  BCF    05.5
00F7:  BSF    03.5
00F8:  BCF    05.5
....................    lcd_output_rw(0); 
00F9:  BCF    03.5
00FA:  BCF    05.2
00FB:  BSF    03.5
00FC:  BCF    05.2
....................    lcd_output_enable(0); 
00FD:  BCF    03.5
00FE:  BCF    05.3
00FF:  BSF    03.5
0100:  BCF    05.3
....................      
....................    delay_ms(15); 
0101:  MOVLW  0F
0102:  BCF    03.5
0103:  MOVWF  39
0104:  CALL   020
....................    for(i=1;i<=3;++i) 
0105:  MOVLW  01
0106:  MOVWF  2B
0107:  MOVF   2B,W
0108:  SUBLW  03
0109:  BTFSS  03.0
010A:  GOTO   115
....................    { 
....................        lcd_send_nibble(3); 
010B:  MOVLW  03
010C:  MOVWF  40
010D:  CALL   035
....................        lcd_send_nibble(0); 
010E:  CLRF   40
010F:  CALL   035
....................        delay_ms(5); 
0110:  MOVLW  05
0111:  MOVWF  39
0112:  CALL   020
....................    } 
0113:  INCF   2B,F
0114:  GOTO   107
....................     
....................    lcd_send_nibble(2); 
0115:  MOVLW  02
0116:  MOVWF  40
0117:  CALL   035
....................    lcd_send_nibble(0); 
0118:  CLRF   40
0119:  CALL   035
....................    delay_ms(5); 
011A:  MOVLW  05
011B:  MOVWF  39
011C:  CALL   020
....................    for(i=0;i<=3;++i) 
011D:  CLRF   2B
011E:  MOVF   2B,W
011F:  SUBLW  03
0120:  BTFSS  03.0
0121:  GOTO   12B
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0122:  MOVF   2B,W
0123:  CALL   004
0124:  MOVWF  2C
0125:  CLRF   3D
0126:  MOVF   2C,W
0127:  MOVWF  3E
0128:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0129:  INCF   2B,F
012A:  GOTO   11E
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
012B:  BCF    0A.3
012C:  BCF    0A.4
012D:  GOTO   41C (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
0247:  DECFSZ 3A,W
0248:  GOTO   24A
0249:  GOTO   24D
....................       address=LCD_LINE_TWO; 
024A:  MOVLW  40
024B:  MOVWF  3B
....................    else 
024C:  GOTO   24E
....................       address=0; 
024D:  CLRF   3B
....................       
....................    address+=x-1; 
024E:  MOVLW  01
024F:  SUBWF  39,W
0250:  ADDWF  3B,F
....................    lcd_send_byte(0,0x80|address); 
0251:  MOVF   3B,W
0252:  IORLW  80
0253:  MOVWF  3C
0254:  CLRF   3D
0255:  MOVF   3C,W
0256:  MOVWF  3E
0257:  CALL   091
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0258:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0259:  MOVF   38,W
025A:  XORLW  07
025B:  BTFSC  03.2
025C:  GOTO   267
025D:  XORLW  0B
025E:  BTFSC  03.2
025F:  GOTO   26C
0260:  XORLW  06
0261:  BTFSC  03.2
0262:  GOTO   274
0263:  XORLW  02
0264:  BTFSC  03.2
0265:  GOTO   27A
0266:  GOTO   27F
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0267:  MOVLW  01
0268:  MOVWF  39
0269:  MOVWF  3A
026A:  CALL   247
026B:  GOTO   285
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
026C:  CLRF   3D
026D:  MOVLW  01
026E:  MOVWF  3E
026F:  CALL   091
....................                      delay_ms(2); 
0270:  MOVLW  02
0271:  MOVWF  39
0272:  CALL   020
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0273:  GOTO   285
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0274:  MOVLW  01
0275:  MOVWF  39
0276:  MOVLW  02
0277:  MOVWF  3A
0278:  CALL   247
0279:  GOTO   285
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
027A:  CLRF   3D
027B:  MOVLW  10
027C:  MOVWF  3E
027D:  CALL   091
027E:  GOTO   285
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
027F:  MOVLW  01
0280:  MOVWF  3D
0281:  MOVF   38,W
0282:  MOVWF  3E
0283:  CALL   091
0284:  GOTO   285
....................      #endif 
....................    } 
.................... } 
0285:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include "..\_Library\keypad.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     KBD_LIB.C by Redraven                         //// 
.................... ////                                                                   //// 
.................... ////                     Derived from KBDD.C                           //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81              // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83              // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... /* 
.................... //Keypad connection:   (for example column 0 is B0) 
....................  
.................... #define COL0 (1 << 0) // PIN_B0 
.................... #define COL1 (1 << 1) // PIN_B1 
.................... #define COL2 (1 << 2) // PIN_B2 
.................... #define COL3 (1 << 3) // PIN_B3 
....................  
.................... #define ROW0 (1 << 4) // PIN_B4 
.................... #define ROW1 (1 << 5) // PIN_B5 
.................... #define ROW2 (1 << 6) // PIN_B6 
.................... #define ROW3 (1 << 7) // PIN_B7 
.................... */ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................       ////////////////////// 
....................       //Keypad connection:// 
....................       ////////////////////// 
....................       //      rb7 --> X1    //               
....................       //      rb6 --> X2     // 
....................       //      rb5 --> X3     // 
....................       //      rb4 --> X4     // 
....................       //                    // 
....................       //      rb3 --> Y1     // 
....................       //      rb2 --> Y2     // 
....................       //      rb1 --> Y3     // 
....................       //      rb0 --> Y4     // 
....................       ////////////////////// 
....................  
.................... #define COL0 (1 << 4) // PIN_B4 
.................... #define COL1 (1 << 5) // PIN_B5 
.................... #define COL2 (1 << 6) // PIN_B6 
.................... #define COL3 (1 << 7) // PIN_B7 
....................  
.................... #define ROW0 (1 << 3) // PIN_B3 
.................... #define ROW1 (1 << 2) // PIN_B2 
.................... #define ROW2 (1 << 1) // PIN_B1 
.................... #define ROW3 (1 << 0) // PIN_B0 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','A'}, 
....................                          {'4','5','6','B'}, 
....................                          {'7','8','9','C'}, 
....................                          {'*','0','#','D'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
.................... void kbd_init() { 
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static byte kbd_call_count; 
*
0415:  BCF    03.5
0416:  CLRF   20
....................    static short int kbd_down; 
0417:  BCF    21.0
....................    static char last_key; 
0418:  CLRF   22
....................    static byte col; 
0419:  CLRF   23
....................  
....................    byte kchar; 
....................    byte row; 
....................  
....................    kchar='\0'; 
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
....................        switch (col) { 
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
....................                     kbd=~COL0&ALL_PINS; 
....................                     break; 
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
....................                     kbd=~COL1&ALL_PINS; 
....................                     break; 
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
....................                     kbd=~COL2&ALL_PINS; 
....................                     break; 
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
....................                     kbd=~COL3&ALL_PINS; 
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
....................            kbd_down=false; 
....................            kchar=last_key; 
....................            last_key='\0'; 
....................          } 
....................        } else { 
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
....................              if((kbd & ROW0)==0) 
....................                row=0; 
....................              else if((kbd & ROW1)==0) 
....................                row=1; 
....................              else if((kbd & ROW2)==0) 
....................                row=2; 
....................              else if((kbd & ROW3)==0) 
....................                row=3; 
....................              last_key =KEYS[row][col]; 
....................              kbd_down = true; 
....................           } else { 
....................              ++col; 
....................              if(col==4) 
....................                col=0; 
....................           } 
....................        } 
....................       kbd_call_count=0; 
....................    } 
....................   set_tris_kbd(ALL_PINS); 
....................   return(kchar); 
.................... } 
....................  
....................  
.................... #include "..\_Library\ultrasound.c" 
.................... #include "ultrasound.h" 
.................... #ifndef  __ULTRASONICO__ 
.................... #define  __ULTRASONICO__ 
....................  
.................... /* 
....................  * LA DISTANCIA SE CALCULA POR LA SIGUIENTE FORMULA 
....................  *    2*DISTANCIA = ESPACIO*TIEMPO 
....................  *    2*DISTANCIA = (340m/s)*TIEMPO 
....................  *    DISTANCIA = 170m/s * TIEMPO 
....................  * 
....................  * EL TIEMPO SE CALCULA CON TIMER1 
....................  *    TIEMPO = 4*TOSC *VALORTIMER1*PRESCALER 
....................  *    TIEMPO = (4/4MHZ)*VALORTIMER1*8    
....................  *    TIEMPO = (8us)*(VALORTIMER1) 
....................  * 
....................  *    ENTONCES LA ECUACION QUEDA: 
....................  *     
....................  *    DISTANCIA = (170m/s)*(8us)*(VALORTIMER1) 
....................  *    DISTANCIA = (170m/s)*(8us)*(VALORTIMER1) 
....................  *    DISTANCIA = (0.136)*(VALORTIMER1) cm 
....................  * 
....................  **/ 
.................... #define  TRIG1 PIN_C1 
.................... #define  ECHO1 PIN_C0 
....................  
.................... void  init_ultrasonico(); 
.................... int16 read_ultrasonico(); 
.................... float calcular_distancia(unsigned int16 tiempo); 
....................  
.................... #endif 
....................  
....................  
.................... void init_ultrasonico(){ 
....................  
....................    set_tris_c(0b00000001); 
*
0010:  MOVLW  01
0011:  BSF    03.5
0012:  MOVWF  07
0013:  BCF    03.5
0014:  MOVWF  24
....................  
....................    output_low(TRIG1); 
0015:  BCF    24.1
0016:  MOVF   24,W
0017:  BSF    03.5
0018:  MOVWF  07
0019:  BCF    03.5
001A:  BCF    07.1
....................     
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    
001B:  MOVLW  B5
001C:  MOVWF  10
.................... } 
001D:  BCF    0A.3
001E:  BCF    0A.4
001F:  GOTO   41B (RETURN)
....................  
.................... unsigned int16 read_time_ultrasonico(){ 
....................    unsigned int16 time; 
....................    output_high(TRIG1);                   
*
012E:  BCF    24.1
012F:  MOVF   24,W
0130:  BSF    03.5
0131:  MOVWF  07
0132:  BCF    03.5
0133:  BSF    07.1
....................    delay_us(20);                       
0134:  MOVLW  06
0135:  MOVWF  77
0136:  DECFSZ 77,F
0137:  GOTO   136
0138:  NOP
....................    output_low(TRIG1); 
0139:  BCF    24.1
013A:  MOVF   24,W
013B:  BSF    03.5
013C:  MOVWF  07
013D:  BCF    03.5
013E:  BCF    07.1
....................    while(!input(ECHO1))  {} 
013F:  BSF    24.0
0140:  MOVF   24,W
0141:  BSF    03.5
0142:  MOVWF  07
0143:  BCF    03.5
0144:  BTFSS  07.0
0145:  GOTO   13F
....................    set_timer1(0);                         
0146:  CLRF   0F
0147:  CLRF   0E
....................    while(input(ECHO1))   { 
0148:  BSF    24.0
0149:  MOVF   24,W
014A:  BSF    03.5
014B:  MOVWF  07
014C:  BCF    03.5
014D:  BTFSS  07.0
014E:  GOTO   16E
....................       time=get_timer1();   
014F:  MOVF   0F,W
0150:  MOVWF  7A
0151:  MOVF   0E,W
0152:  MOVWF  77
0153:  MOVF   0F,W
0154:  SUBWF  7A,W
0155:  BTFSS  03.2
0156:  GOTO   14F
0157:  MOVF   77,W
0158:  MOVWF  2B
0159:  MOVF   7A,W
015A:  MOVWF  2C
....................       if(time > 3000){ 
015B:  MOVF   2C,W
015C:  SUBLW  0A
015D:  BTFSC  03.0
015E:  GOTO   16D
015F:  XORLW  FF
0160:  BTFSS  03.2
0161:  GOTO   166
0162:  MOVF   2B,W
0163:  SUBLW  B8
0164:  BTFSC  03.0
0165:  GOTO   16D
....................          time = 3000; 
0166:  MOVLW  0B
0167:  MOVWF  2C
0168:  MOVLW  B8
0169:  MOVWF  2B
....................          set_timer1(0);  
016A:  CLRF   0F
016B:  CLRF   0E
....................          break; 
016C:  GOTO   16E
....................       } 
....................    } 
016D:  GOTO   148
....................    set_timer1(0);   
016E:  CLRF   0F
016F:  CLRF   0E
....................    return time; 
0170:  MOVF   2B,W
0171:  MOVWF  78
0172:  MOVF   2C,W
0173:  MOVWF  79
.................... } 
0174:  BCF    0A.3
0175:  BCF    0A.4
0176:  GOTO   41D (RETURN)
....................  
.................... float calcular_distancia(unsigned int16 tiempo){ 
....................    float distancia; 
....................    distancia = tiempo * 0.136 * 1.05; 
*
01EC:  MOVF   2C,W
01ED:  MOVWF  32
01EE:  MOVF   2B,W
01EF:  MOVWF  31
*
020C:  MOVF   7A,W
020D:  MOVWF  3B
020E:  MOVF   79,W
020F:  MOVWF  3A
0210:  MOVF   78,W
0211:  MOVWF  39
0212:  MOVF   77,W
0213:  MOVWF  38
0214:  MOVLW  96
0215:  MOVWF  3F
0216:  MOVLW  43
0217:  MOVWF  3E
0218:  MOVLW  0B
0219:  MOVWF  3D
021A:  MOVLW  7C
021B:  MOVWF  3C
021C:  CALL   177
021D:  MOVF   77,W
021E:  MOVWF  31
021F:  MOVF   78,W
0220:  MOVWF  32
0221:  MOVF   79,W
0222:  MOVWF  33
0223:  MOVF   7A,W
0224:  MOVWF  34
0225:  MOVWF  3B
0226:  MOVF   79,W
0227:  MOVWF  3A
0228:  MOVF   78,W
0229:  MOVWF  39
022A:  MOVF   77,W
022B:  MOVWF  38
022C:  MOVLW  66
022D:  MOVWF  3F
022E:  MOVWF  3E
022F:  MOVLW  06
0230:  MOVWF  3D
0231:  MOVLW  7F
0232:  MOVWF  3C
0233:  CALL   177
0234:  MOVF   7A,W
0235:  MOVWF  30
0236:  MOVF   79,W
0237:  MOVWF  2F
0238:  MOVF   78,W
0239:  MOVWF  2E
023A:  MOVF   77,W
023B:  MOVWF  2D
....................    return distancia; 
023C:  MOVF   2D,W
023D:  MOVWF  77
023E:  MOVF   2E,W
023F:  MOVWF  78
0240:  MOVF   2F,W
0241:  MOVWF  79
0242:  MOVF   30,W
0243:  MOVWF  7A
....................  
.................... } 
0244:  BCF    0A.3
0245:  BCF    0A.4
0246:  GOTO   426 (RETURN)
....................  
....................  
....................  
....................  
.................... void main(){ 
*
0408:  CLRF   04
0409:  BCF    03.7
040A:  MOVLW  1F
040B:  ANDWF  03,F
040C:  MOVLW  FF
040D:  MOVWF  24
040E:  BSF    03.5
040F:  BSF    1F.0
0410:  BSF    1F.1
0411:  BSF    1F.2
0412:  BCF    1F.3
0413:  MOVLW  07
0414:  MOVWF  1C
....................    unsigned int16 tiempo; 
....................    float distancia; 
....................     
....................    init_ultrasonico(); 
*
041A:  GOTO   010
....................    lcd_init(); 
041B:  GOTO   0ED
....................     
....................    for(;;){ 
....................       tiempo = read_time_ultrasonico(); 
041C:  GOTO   12E
041D:  MOVF   79,W
041E:  MOVWF  26
041F:  MOVF   78,W
0420:  MOVWF  25
....................       distancia = calcular_distancia( tiempo ); 
0421:  MOVF   26,W
0422:  MOVWF  2C
0423:  MOVF   25,W
0424:  MOVWF  2B
0425:  GOTO   1EC
0426:  MOVF   7A,W
0427:  MOVWF  2A
0428:  MOVF   79,W
0429:  MOVWF  29
042A:  MOVF   78,W
042B:  MOVWF  28
042C:  MOVF   77,W
042D:  MOVWF  27
....................       printf(lcd_putc,"dist=%f",distancia); 
042E:  MOVLW  0C
042F:  BSF    03.6
0430:  MOVWF  0D
0431:  MOVLW  00
0432:  MOVWF  0F
0433:  BCF    03.0
0434:  MOVLW  05
0435:  BCF    03.6
0436:  MOVWF  2B
0437:  GOTO   286
0438:  MOVLW  89
0439:  MOVWF  04
043A:  MOVF   2A,W
043B:  MOVWF  2E
043C:  MOVF   29,W
043D:  MOVWF  2D
043E:  MOVF   28,W
043F:  MOVWF  2C
0440:  MOVF   27,W
0441:  MOVWF  2B
0442:  MOVLW  02
0443:  MOVWF  2F
0444:  GOTO   326
....................       delay_ms(300); 
0445:  MOVLW  02
0446:  MOVWF  2B
0447:  MOVLW  96
0448:  MOVWF  39
0449:  CALL   020
044A:  DECFSZ 2B,F
044B:  GOTO   447
....................       lcd_putc('\f');       
044C:  MOVLW  0C
044D:  MOVWF  38
044E:  CALL   259
....................    } 
044F:  GOTO   41C
.................... } 
0450:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
