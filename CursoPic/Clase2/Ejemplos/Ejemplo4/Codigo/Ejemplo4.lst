CCS PCM C Compiler, Version 4.057, 10717               30-nov-16 21:05

               Filename: D:\LaboTEC\Cursos\PIC\Clases\Clase2\Ejemplos\Ejemplo4\Ejemplo4.lst

               ROM used: 315 words (4%)
                         Largest free fragment is 2048
               RAM used: 6 (2%) at main() level
                         16 (4%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   123
0003:  NOP
.................... #include <16f877a.h>  
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=4M)  
000C:  MOVLW  22
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETLW  00
.................... #fuses XT  
.................... #include <lcd.c>      
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
002E:  MOVLW  F0
002F:  BSF    03.5
0030:  MOVWF  08
....................       lcd.rw = 1; 
0031:  BCF    03.5
0032:  BSF    08.2
....................       delay_cycles(1); 
0033:  NOP
....................       lcd.enable = 1; 
0034:  BSF    08.0
....................       delay_cycles(1); 
0035:  NOP
....................       high = lcd.data; 
0036:  MOVF   08,W
0037:  SWAPF  08,W
0038:  ANDLW  0F
0039:  MOVWF  29
....................       lcd.enable = 0; 
003A:  BCF    08.0
....................       delay_cycles(1); 
003B:  NOP
....................       lcd.enable = 1; 
003C:  BSF    08.0
....................       delay_us(1); 
003D:  NOP
....................       low = lcd.data; 
003E:  MOVF   08,W
003F:  SWAPF  08,W
0040:  ANDLW  0F
0041:  MOVWF  28
....................       lcd.enable = 0; 
0042:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0043:  MOVLW  00
0044:  BSF    03.5
0045:  MOVWF  08
....................       return( (high<<4) | low); 
0046:  BCF    03.5
0047:  SWAPF  29,W
0048:  MOVWF  77
0049:  MOVLW  F0
004A:  ANDWF  77,F
004B:  MOVF   77,W
004C:  IORWF  28,W
004D:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0021:  SWAPF  29,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  08,W
0026:  IORWF  77,W
0027:  MOVWF  08
....................       delay_cycles(1); 
0028:  NOP
....................       lcd.enable = 1; 
0029:  BSF    08.0
....................       delay_us(2); 
002A:  GOTO   02B
....................       lcd.enable = 0; 
002B:  BCF    08.0
.................... } 
002C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
002D:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
004E:  MOVF   78,W
004F:  MOVWF  28
0050:  BTFSC  28.7
0051:  GOTO   02E
....................       lcd.rs = address; 
0052:  BTFSS  26.0
0053:  BCF    08.1
0054:  BTFSC  26.0
0055:  BSF    08.1
....................       delay_cycles(1); 
0056:  NOP
....................       lcd.rw = 0; 
0057:  BCF    08.2
....................       delay_cycles(1); 
0058:  NOP
....................       lcd.enable = 0; 
0059:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
005A:  SWAPF  27,W
005B:  MOVWF  28
005C:  MOVLW  0F
005D:  ANDWF  28,F
005E:  MOVF   28,W
005F:  MOVWF  29
0060:  CALL   021
....................       lcd_send_nibble(n & 0xf); 
0061:  MOVF   27,W
0062:  ANDLW  0F
0063:  MOVWF  28
0064:  MOVWF  29
0065:  CALL   021
.................... } 
0066:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0067:  MOVLW  00
0068:  BSF    03.5
0069:  MOVWF  08
....................     lcd.rs = 0; 
006A:  BCF    03.5
006B:  BCF    08.1
....................     lcd.rw = 0; 
006C:  BCF    08.2
....................     lcd.enable = 0; 
006D:  BCF    08.0
....................     delay_ms(15); 
006E:  MOVLW  0F
006F:  MOVWF  22
0070:  CALL   00C
....................     for(i=1;i<=3;++i) { 
0071:  MOVLW  01
0072:  MOVWF  21
0073:  MOVF   21,W
0074:  SUBLW  03
0075:  BTFSS  03.0
0076:  GOTO   07F
....................        lcd_send_nibble(3); 
0077:  MOVLW  03
0078:  MOVWF  29
0079:  CALL   021
....................        delay_ms(5); 
007A:  MOVLW  05
007B:  MOVWF  22
007C:  CALL   00C
....................     } 
007D:  INCF   21,F
007E:  GOTO   073
....................     lcd_send_nibble(2); 
007F:  MOVLW  02
0080:  MOVWF  29
0081:  CALL   021
....................     for(i=0;i<=3;++i) 
0082:  CLRF   21
0083:  MOVF   21,W
0084:  SUBLW  03
0085:  BTFSS  03.0
0086:  GOTO   090
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0087:  MOVF   21,W
0088:  CALL   004
0089:  MOVWF  22
008A:  CLRF   26
008B:  MOVF   22,W
008C:  MOVWF  27
008D:  CALL   02D
008E:  INCF   21,F
008F:  GOTO   083
.................... } 
0090:  BCF    0A.3
0091:  BCF    0A.4
0092:  GOTO   130 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0105:  DECFSZ 23,W
0106:  GOTO   108
0107:  GOTO   10B
....................      address=lcd_line_two; 
0108:  MOVLW  40
0109:  MOVWF  24
....................    else 
010A:  GOTO   10C
....................      address=0; 
010B:  CLRF   24
....................    address+=x-1; 
010C:  MOVLW  01
010D:  SUBWF  22,W
010E:  ADDWF  24,F
....................    lcd_send_byte(0,0x80|address); 
010F:  MOVF   24,W
0110:  IORLW  80
0111:  MOVWF  25
0112:  CLRF   26
0113:  MOVF   25,W
0114:  MOVWF  27
0115:  CALL   02D
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00EE:  MOVF   21,W
00EF:  XORLW  0C
00F0:  BTFSC  03.2
00F1:  GOTO   0F9
00F2:  XORLW  06
00F3:  BTFSC  03.2
00F4:  GOTO   101
00F5:  XORLW  02
00F6:  BTFSC  03.2
00F7:  GOTO   117
00F8:  GOTO   11C
....................      case '\f'   : lcd_send_byte(0,1); 
00F9:  CLRF   26
00FA:  MOVLW  01
00FB:  MOVWF  27
00FC:  CALL   02D
....................                    delay_ms(2); 
00FD:  MOVLW  02
00FE:  MOVWF  22
00FF:  CALL   00C
....................                                            break; 
0100:  GOTO   122
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0101:  MOVLW  01
0102:  MOVWF  22
0103:  MOVLW  02
0104:  MOVWF  23
*
0116:  GOTO   122
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0117:  CLRF   26
0118:  MOVLW  10
0119:  MOVWF  27
011A:  CALL   02D
011B:  GOTO   122
....................      default     : lcd_send_byte(1,c);     break; 
011C:  MOVLW  01
011D:  MOVWF  26
011E:  MOVF   21,W
011F:  MOVWF  27
0120:  CALL   02D
0121:  GOTO   122
....................    } 
.................... } 
0122:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... void nuevo_caracter(void){ 
....................    lcd_send_byte(0,0x40);           //Defino el primero caracter en la direccion 0x40    
*
0093:  CLRF   26
0094:  MOVLW  40
0095:  MOVWF  27
0096:  CALL   02D
....................    lcd_send_byte(1,0b00001110);lcd_send_byte(1,0b00001110); 
0097:  MOVLW  01
0098:  MOVWF  26
0099:  MOVLW  0E
009A:  MOVWF  27
009B:  CALL   02D
009C:  MOVLW  01
009D:  MOVWF  26
009E:  MOVLW  0E
009F:  MOVWF  27
00A0:  CALL   02D
....................    lcd_send_byte(1,0b00001110);lcd_send_byte(1,0b00000100); 
00A1:  MOVLW  01
00A2:  MOVWF  26
00A3:  MOVLW  0E
00A4:  MOVWF  27
00A5:  CALL   02D
00A6:  MOVLW  01
00A7:  MOVWF  26
00A8:  MOVLW  04
00A9:  MOVWF  27
00AA:  CALL   02D
....................    lcd_send_byte(1,0b00011111);lcd_send_byte(1,0b00000100); 
00AB:  MOVLW  01
00AC:  MOVWF  26
00AD:  MOVLW  1F
00AE:  MOVWF  27
00AF:  CALL   02D
00B0:  MOVLW  01
00B1:  MOVWF  26
00B2:  MOVLW  04
00B3:  MOVWF  27
00B4:  CALL   02D
....................    lcd_send_byte(1,0b00001010);lcd_send_byte(1,0b00010001);    
00B5:  MOVLW  01
00B6:  MOVWF  26
00B7:  MOVLW  0A
00B8:  MOVWF  27
00B9:  CALL   02D
00BA:  MOVLW  01
00BB:  MOVWF  26
00BC:  MOVLW  11
00BD:  MOVWF  27
00BE:  CALL   02D
....................    lcd_send_byte(0,0x48);            //   Defino el segundo caracter en la direccion 0x48       
00BF:  CLRF   26
00C0:  MOVLW  48
00C1:  MOVWF  27
00C2:  CALL   02D
....................    lcd_send_byte(1,0b00001110);lcd_send_byte(1,0b00001110); 
00C3:  MOVLW  01
00C4:  MOVWF  26
00C5:  MOVLW  0E
00C6:  MOVWF  27
00C7:  CALL   02D
00C8:  MOVLW  01
00C9:  MOVWF  26
00CA:  MOVLW  0E
00CB:  MOVWF  27
00CC:  CALL   02D
....................    lcd_send_byte(1,0b00001110);lcd_send_byte(1,0b00000100); 
00CD:  MOVLW  01
00CE:  MOVWF  26
00CF:  MOVLW  0E
00D0:  MOVWF  27
00D1:  CALL   02D
00D2:  MOVLW  01
00D3:  MOVWF  26
00D4:  MOVLW  04
00D5:  MOVWF  27
00D6:  CALL   02D
....................    lcd_send_byte(1,0b00011111);lcd_send_byte(1,0b00000100); 
00D7:  MOVLW  01
00D8:  MOVWF  26
00D9:  MOVLW  1F
00DA:  MOVWF  27
00DB:  CALL   02D
00DC:  MOVLW  01
00DD:  MOVWF  26
00DE:  MOVLW  04
00DF:  MOVWF  27
00E0:  CALL   02D
....................    lcd_send_byte(1,0b00001110);lcd_send_byte(1,0b00011111); 
00E1:  MOVLW  01
00E2:  MOVWF  26
00E3:  MOVLW  0E
00E4:  MOVWF  27
00E5:  CALL   02D
00E6:  MOVLW  01
00E7:  MOVWF  26
00E8:  MOVLW  1F
00E9:  MOVWF  27
00EA:  CALL   02D
.................... } 
00EB:  BCF    0A.3
00EC:  BCF    0A.4
00ED:  GOTO   131 (RETURN)
....................             
.................... void main(void){   
*
0123:  CLRF   04
0124:  BCF    03.7
0125:  MOVLW  1F
0126:  ANDWF  03,F
0127:  BSF    03.5
0128:  BSF    1F.0
0129:  BSF    1F.1
012A:  BSF    1F.2
012B:  BCF    1F.3
012C:  MOVLW  07
012D:  MOVWF  1C
....................    lcd_init();        
012E:  BCF    03.5
012F:  GOTO   067
....................    nuevo_caracter();  
0130:  GOTO   093
....................    lcd_putc('\f');   
0131:  MOVLW  0C
0132:  MOVWF  21
0133:  CALL   0EE
....................    lcd_putc(0); 
0134:  CLRF   21
0135:  CALL   0EE
....................    lcd_putc(1); 
0136:  MOVLW  01
0137:  MOVWF  21
0138:  CALL   0EE
....................    for(;;){          
....................    } 
0139:  GOTO   139
.................... } 
....................  
....................  
013A:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
