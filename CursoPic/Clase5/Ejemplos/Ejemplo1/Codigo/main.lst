CCS PCM C Compiler, Version 4.114, 93513558               17-Dic.-16 00:30

               Filename: D:\LaboTEC\Cursos\Curso_PIC\Modulo_1\Clase5\Ejemplos\Ejemplo1\main.lst

               ROM used: 906 words (11%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         35 (10%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   30A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   039
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses   XT 
.................... #DEVICE  ADC = 10 
.................... #use     delay(CLOCK = 4M) 
*
005B:  MOVLW  34
005C:  MOVWF  04
005D:  BCF    03.7
005E:  MOVF   00,W
005F:  BTFSC  03.2
0060:  GOTO   06F
0061:  MOVLW  01
0062:  MOVWF  78
0063:  CLRF   77
0064:  DECFSZ 77,F
0065:  GOTO   064
0066:  DECFSZ 78,F
0067:  GOTO   063
0068:  MOVLW  4A
0069:  MOVWF  77
006A:  DECFSZ 77,F
006B:  GOTO   06A
006C:  GOTO   06D
006D:  DECFSZ 00,F
006E:  GOTO   061
006F:  RETURN
.................... #define  LCD_DATA_PORT getenv("SFR:PORTD")                                    
.................... #define  LCD_ENABLE_PIN  PIN_A3                                   
.................... #define  LCD_RS_PIN      PIN_A5                                   
.................... #define  LCD_RW_PIN      PIN_A2    
.................... #define  LCD_DATA4       PIN_D4                                    
.................... #define  LCD_DATA5       PIN_D5                                     
.................... #define  LCD_DATA6       PIN_D6                                     
.................... #define  LCD_DATA7       PIN_D7    
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00D4:  BSF    08.4
....................    output_float(LCD_DATA5); 
00D5:  BSF    08.5
....................    output_float(LCD_DATA6); 
00D6:  BSF    08.6
....................    output_float(LCD_DATA7); 
00D7:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00D8:  BCF    03.5
00D9:  BSF    05.2
00DA:  BSF    03.5
00DB:  BCF    05.2
....................    delay_cycles(1); 
00DC:  NOP
....................    lcd_output_enable(1); 
00DD:  BCF    03.5
00DE:  BSF    05.3
00DF:  BSF    03.5
00E0:  BCF    05.3
....................    delay_cycles(1); 
00E1:  NOP
....................    high = lcd_read_nibble(); 
00E2:  BCF    03.5
00E3:  CALL   09B
00E4:  MOVF   78,W
00E5:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
00E6:  BCF    05.3
00E7:  BSF    03.5
00E8:  BCF    05.3
....................    delay_cycles(1); 
00E9:  NOP
....................    lcd_output_enable(1); 
00EA:  BCF    03.5
00EB:  BSF    05.3
00EC:  BSF    03.5
00ED:  BCF    05.3
....................    delay_us(1); 
00EE:  NOP
....................    low = lcd_read_nibble(); 
00EF:  BCF    03.5
00F0:  CALL   09B
00F1:  MOVF   78,W
00F2:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00F3:  BCF    05.3
00F4:  BSF    03.5
00F5:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F6:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F7:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F8:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F9:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00FA:  BCF    03.5
00FB:  SWAPF  3B,W
00FC:  MOVWF  77
00FD:  MOVLW  F0
00FE:  ANDWF  77,F
00FF:  MOVF   77,W
0100:  IORWF  3A,W
0101:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
009B:  CLRF   3C
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
009C:  BSF    03.5
009D:  BSF    08.4
009E:  MOVLW  00
009F:  BCF    03.5
00A0:  BTFSC  08.4
00A1:  MOVLW  01
00A2:  IORWF  3C,F
....................    n |= input(LCD_DATA5) << 1; 
00A3:  BSF    03.5
00A4:  BSF    08.5
00A5:  MOVLW  00
00A6:  BCF    03.5
00A7:  BTFSC  08.5
00A8:  MOVLW  01
00A9:  MOVWF  77
00AA:  BCF    03.0
00AB:  RLF    77,F
00AC:  MOVF   77,W
00AD:  IORWF  3C,F
....................    n |= input(LCD_DATA6) << 2; 
00AE:  BSF    03.5
00AF:  BSF    08.6
00B0:  MOVLW  00
00B1:  BCF    03.5
00B2:  BTFSC  08.6
00B3:  MOVLW  01
00B4:  MOVWF  77
00B5:  RLF    77,F
00B6:  RLF    77,F
00B7:  MOVLW  FC
00B8:  ANDWF  77,F
00B9:  MOVF   77,W
00BA:  IORWF  3C,F
....................    n |= input(LCD_DATA7) << 3; 
00BB:  BSF    03.5
00BC:  BSF    08.7
00BD:  MOVLW  00
00BE:  BCF    03.5
00BF:  BTFSC  08.7
00C0:  MOVLW  01
00C1:  MOVWF  77
00C2:  RLF    77,F
00C3:  RLF    77,F
00C4:  RLF    77,F
00C5:  MOVLW  F8
00C6:  ANDWF  77,F
00C7:  MOVF   77,W
00C8:  IORWF  3C,F
....................     
....................    return(n); 
00C9:  MOVF   3C,W
00CA:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
00CB:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0070:  BTFSC  3B.0
0071:  GOTO   074
0072:  BCF    08.4
0073:  GOTO   075
0074:  BSF    08.4
0075:  BSF    03.5
0076:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0077:  BCF    03.5
0078:  BTFSC  3B.1
0079:  GOTO   07C
007A:  BCF    08.5
007B:  GOTO   07D
007C:  BSF    08.5
007D:  BSF    03.5
007E:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
007F:  BCF    03.5
0080:  BTFSC  3B.2
0081:  GOTO   084
0082:  BCF    08.6
0083:  GOTO   085
0084:  BSF    08.6
0085:  BSF    03.5
0086:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0087:  BCF    03.5
0088:  BTFSC  3B.3
0089:  GOTO   08C
008A:  BCF    08.7
008B:  GOTO   08D
008C:  BSF    08.7
008D:  BSF    03.5
008E:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_enable(1); 
0090:  BCF    03.5
0091:  BSF    05.3
0092:  BSF    03.5
0093:  BCF    05.3
....................    delay_us(2); 
0094:  GOTO   095
....................    lcd_output_enable(0); 
0095:  BCF    03.5
0096:  BCF    05.3
0097:  BSF    03.5
0098:  BCF    05.3
.................... } 
0099:  BCF    03.5
009A:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00CC:  BSF    03.5
00CD:  BCF    05.3
....................    lcd_rs_tris(); 
00CE:  BCF    05.5
....................    lcd_rw_tris(); 
00CF:  BCF    05.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00D0:  BCF    03.5
00D1:  BCF    05.5
00D2:  BSF    03.5
00D3:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0102:  MOVF   78,W
0103:  MOVWF  3A
0104:  BTFSS  3A.7
0105:  GOTO   108
0106:  BSF    03.5
0107:  GOTO   0D4
....................    lcd_output_rs(address); 
0108:  MOVF   38,F
0109:  BTFSS  03.2
010A:  GOTO   10D
010B:  BCF    05.5
010C:  GOTO   10E
010D:  BSF    05.5
010E:  BSF    03.5
010F:  BCF    05.5
....................    delay_cycles(1); 
0110:  NOP
....................    lcd_output_rw(0); 
0111:  BCF    03.5
0112:  BCF    05.2
0113:  BSF    03.5
0114:  BCF    05.2
....................    delay_cycles(1); 
0115:  NOP
....................    lcd_output_enable(0); 
0116:  BCF    03.5
0117:  BCF    05.3
0118:  BSF    03.5
0119:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
011A:  BCF    03.5
011B:  SWAPF  39,W
011C:  MOVWF  3A
011D:  MOVLW  0F
011E:  ANDWF  3A,F
011F:  MOVF   3A,W
0120:  MOVWF  3B
0121:  CALL   070
....................    lcd_send_nibble(n & 0xf); 
0122:  MOVF   39,W
0123:  ANDLW  0F
0124:  MOVWF  3A
0125:  MOVWF  3B
0126:  CALL   070
.................... } 
0127:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0128:  BSF    03.5
0129:  BCF    08.4
....................    output_drive(LCD_DATA5); 
012A:  BCF    08.5
....................    output_drive(LCD_DATA6); 
012B:  BCF    08.6
....................    output_drive(LCD_DATA7); 
012C:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
012D:  BCF    05.3
....................    lcd_rs_tris(); 
012E:  BCF    05.5
....................    lcd_rw_tris(); 
012F:  BCF    05.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0130:  BCF    03.5
0131:  BCF    05.5
0132:  BSF    03.5
0133:  BCF    05.5
....................    lcd_output_rw(0); 
0134:  BCF    03.5
0135:  BCF    05.2
0136:  BSF    03.5
0137:  BCF    05.2
....................    lcd_output_enable(0); 
0138:  BCF    03.5
0139:  BCF    05.3
013A:  BSF    03.5
013B:  BCF    05.3
....................      
....................    delay_ms(15); 
013C:  MOVLW  0F
013D:  BCF    03.5
013E:  MOVWF  34
013F:  CALL   05B
....................    for(i=1;i<=3;++i) 
0140:  MOVLW  01
0141:  MOVWF  2A
0142:  MOVF   2A,W
0143:  SUBLW  03
0144:  BTFSS  03.0
0145:  GOTO   150
....................    { 
....................        lcd_send_nibble(3); 
0146:  MOVLW  03
0147:  MOVWF  3B
0148:  CALL   070
....................        lcd_send_nibble(0); 
0149:  CLRF   3B
014A:  CALL   070
....................        delay_ms(5); 
014B:  MOVLW  05
014C:  MOVWF  34
014D:  CALL   05B
....................    } 
014E:  INCF   2A,F
014F:  GOTO   142
....................     
....................    lcd_send_nibble(2); 
0150:  MOVLW  02
0151:  MOVWF  3B
0152:  CALL   070
....................    lcd_send_nibble(0); 
0153:  CLRF   3B
0154:  CALL   070
....................    delay_ms(5); 
0155:  MOVLW  05
0156:  MOVWF  34
0157:  CALL   05B
....................    for(i=0;i<=3;++i) 
0158:  CLRF   2A
0159:  MOVF   2A,W
015A:  SUBLW  03
015B:  BTFSS  03.0
015C:  GOTO   166
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
015D:  MOVF   2A,W
015E:  CALL   031
015F:  MOVWF  2B
0160:  CLRF   38
0161:  MOVF   2B,W
0162:  MOVWF  39
0163:  CALL   0CC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0164:  INCF   2A,F
0165:  GOTO   159
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0166:  BCF    0A.3
0167:  BCF    0A.4
0168:  GOTO   32E (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
0169:  DECFSZ 35,W
016A:  GOTO   16C
016B:  GOTO   16F
....................       address=LCD_LINE_TWO; 
016C:  MOVLW  40
016D:  MOVWF  36
....................    else 
016E:  GOTO   170
....................       address=0; 
016F:  CLRF   36
....................       
....................    address+=x-1; 
0170:  MOVLW  01
0171:  SUBWF  34,W
0172:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
0173:  MOVF   36,W
0174:  IORLW  80
0175:  MOVWF  37
0176:  CLRF   38
0177:  MOVF   37,W
0178:  MOVWF  39
0179:  CALL   0CC
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
017A:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
017B:  MOVF   33,W
017C:  XORLW  07
017D:  BTFSC  03.2
017E:  GOTO   189
017F:  XORLW  0B
0180:  BTFSC  03.2
0181:  GOTO   18E
0182:  XORLW  06
0183:  BTFSC  03.2
0184:  GOTO   196
0185:  XORLW  02
0186:  BTFSC  03.2
0187:  GOTO   19C
0188:  GOTO   1A1
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0189:  MOVLW  01
018A:  MOVWF  34
018B:  MOVWF  35
018C:  CALL   169
018D:  GOTO   1A7
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
018E:  CLRF   38
018F:  MOVLW  01
0190:  MOVWF  39
0191:  CALL   0CC
....................                      delay_ms(2); 
0192:  MOVLW  02
0193:  MOVWF  34
0194:  CALL   05B
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0195:  GOTO   1A7
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0196:  MOVLW  01
0197:  MOVWF  34
0198:  MOVLW  02
0199:  MOVWF  35
019A:  CALL   169
019B:  GOTO   1A7
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
019C:  CLRF   38
019D:  MOVLW  10
019E:  MOVWF  39
019F:  CALL   0CC
01A0:  GOTO   1A7
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01A1:  MOVLW  01
01A2:  MOVWF  38
01A3:  MOVF   33,W
01A4:  MOVWF  39
01A5:  CALL   0CC
01A6:  GOTO   1A7
....................      #endif 
....................    } 
.................... } 
01A7:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #use     rs232(BAUD = 9600,XMIT = PIN_C6, RCV = PIN_C7)    
....................  
.................... char data = '-'; 
....................  
.................... #INT_RDA  
.................... void recibir(){ 
....................    data = getc(); 
*
0039:  BTFSS  0C.5
003A:  GOTO   039
003B:  MOVF   1A,W
003C:  MOVWF  27
.................... }  
....................  
003D:  BCF    0C.5
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01D
.................... void main(){ 
*
005A:  DATA 00,00
*
030A:  CLRF   04
030B:  BCF    03.7
030C:  MOVLW  1F
030D:  ANDWF  03,F
030E:  MOVLW  19
030F:  BSF    03.5
0310:  MOVWF  19
0311:  MOVLW  A6
0312:  MOVWF  18
0313:  MOVLW  90
0314:  BCF    03.5
0315:  MOVWF  18
0316:  MOVLW  2D
0317:  MOVWF  27
0318:  BSF    03.5
0319:  BSF    1F.0
031A:  BSF    1F.1
031B:  BSF    1F.2
031C:  BCF    1F.3
031D:  MOVLW  07
031E:  MOVWF  1C
....................    int16 adc1; 
....................     
....................    setup_adc(  ADC_CLOCK_INTERNAL ); 
031F:  BCF    1F.6
0320:  BCF    03.5
0321:  BSF    1F.6
0322:  BSF    1F.7
0323:  BSF    03.5
0324:  BSF    1F.7
0325:  BCF    03.5
0326:  BSF    1F.0
....................    setup_adc_ports(  AN0_AN1_AN3  );    
0327:  BSF    03.5
0328:  BCF    1F.0
0329:  BCF    1F.1
032A:  BSF    1F.2
032B:  BCF    1F.3
....................    lcd_init(); 
032C:  BCF    03.5
032D:  GOTO   128
....................  
....................    for(;;){ 
....................       set_adc_channel( 0 ); 
032E:  MOVLW  00
032F:  MOVWF  78
0330:  MOVF   1F,W
0331:  ANDLW  C7
0332:  IORWF  78,W
0333:  MOVWF  1F
....................       delay_us(20); 
0334:  MOVLW  06
0335:  MOVWF  77
0336:  DECFSZ 77,F
0337:  GOTO   336
0338:  NOP
....................       adc1 = read_adc();   
0339:  BSF    1F.2
033A:  BTFSC  1F.2
033B:  GOTO   33A
033C:  BSF    03.5
033D:  MOVF   1E,W
033E:  BCF    03.5
033F:  MOVWF  28
0340:  MOVF   1E,W
0341:  MOVWF  29
....................       lcd_gotoxy(1,1); 
0342:  MOVLW  01
0343:  MOVWF  34
0344:  MOVWF  35
0345:  CALL   169
....................       printf(lcd_putc,"Send Uart = %Lu",adc1); 
0346:  MOVLW  41
0347:  BSF    03.6
0348:  MOVWF  0D
0349:  MOVLW  00
034A:  MOVWF  0F
034B:  BCF    03.0
034C:  MOVLW  0C
034D:  BCF    03.6
034E:  MOVWF  2A
034F:  CALL   1A8
0350:  MOVLW  10
0351:  MOVWF  04
0352:  MOVF   29,W
0353:  MOVWF  2B
0354:  MOVF   28,W
0355:  MOVWF  2A
0356:  GOTO   1F7
....................       printf("Send Uart = %Lu\r\n",adc1); 
0357:  MOVLW  49
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  00
035B:  MOVWF  0F
035C:  BCF    03.0
035D:  MOVLW  0C
035E:  BCF    03.6
035F:  MOVWF  2A
0360:  GOTO   25C
0361:  MOVLW  10
0362:  MOVWF  04
0363:  MOVF   29,W
0364:  MOVWF  2B
0365:  MOVF   28,W
0366:  MOVWF  2A
0367:  GOTO   2AF
0368:  MOVLW  0D
0369:  BTFSS  0C.4
036A:  GOTO   369
036B:  MOVWF  19
036C:  MOVLW  0A
036D:  BTFSS  0C.4
036E:  GOTO   36D
036F:  MOVWF  19
....................       lcd_gotoxy(1,2); 
0370:  MOVLW  01
0371:  MOVWF  34
0372:  MOVLW  02
0373:  MOVWF  35
0374:  CALL   169
....................       printf(lcd_putc,"Receive Uart: %c",data); 
0375:  MOVLW  52
0376:  BSF    03.6
0377:  MOVWF  0D
0378:  MOVLW  00
0379:  MOVWF  0F
037A:  BCF    03.0
037B:  MOVLW  0E
037C:  BCF    03.6
037D:  MOVWF  2A
037E:  CALL   1A8
037F:  MOVF   27,W
0380:  MOVWF  33
0381:  CALL   17B
....................       delay_ms(100); 
0382:  MOVLW  64
0383:  MOVWF  34
0384:  CALL   05B
....................       lcd_putc('\f'); 
0385:  MOVLW  0C
0386:  MOVWF  33
0387:  CALL   17B
....................    } 
0388:  GOTO   32E
.................... } 
....................  
0389:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
