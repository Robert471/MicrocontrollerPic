CCS PCM C Compiler, Version 4.057, 10717               02-dic-16 19:05

               Filename: D:\LaboTEC\Cursos\PIC\Clases\Clase2\Ejemplos\Ejemplo1\Ejemplo1.lst

               ROM used: 245 words (3%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         17 (5%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DB
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=4M)  
001D:  MOVLW  23
001E:  MOVWF  04
001F:  BCF    03.7
0020:  MOVF   00,W
0021:  BTFSC  03.2
0022:  GOTO   031
0023:  MOVLW  01
0024:  MOVWF  78
0025:  CLRF   77
0026:  DECFSZ 77,F
0027:  GOTO   026
0028:  DECFSZ 78,F
0029:  GOTO   025
002A:  MOVLW  4A
002B:  MOVWF  77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  GOTO   02F
002F:  DECFSZ 00,F
0030:  GOTO   023
0031:  RETLW  00
.................... #fuses XT  
.................... #include <lcd.c>      
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
003F:  MOVLW  F0
0040:  BSF    03.5
0041:  MOVWF  08
....................       lcd.rw = 1; 
0042:  BCF    03.5
0043:  BSF    08.2
....................       delay_cycles(1); 
0044:  NOP
....................       lcd.enable = 1; 
0045:  BSF    08.0
....................       delay_cycles(1); 
0046:  NOP
....................       high = lcd.data; 
0047:  MOVF   08,W
0048:  SWAPF  08,W
0049:  ANDLW  0F
004A:  MOVWF  2A
....................       lcd.enable = 0; 
004B:  BCF    08.0
....................       delay_cycles(1); 
004C:  NOP
....................       lcd.enable = 1; 
004D:  BSF    08.0
....................       delay_us(1); 
004E:  NOP
....................       low = lcd.data; 
004F:  MOVF   08,W
0050:  SWAPF  08,W
0051:  ANDLW  0F
0052:  MOVWF  29
....................       lcd.enable = 0; 
0053:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0054:  MOVLW  00
0055:  BSF    03.5
0056:  MOVWF  08
....................       return( (high<<4) | low); 
0057:  BCF    03.5
0058:  SWAPF  2A,W
0059:  MOVWF  77
005A:  MOVLW  F0
005B:  ANDWF  77,F
005C:  MOVF   77,W
005D:  IORWF  29,W
005E:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0032:  SWAPF  2A,W
0033:  ANDLW  F0
0034:  MOVWF  77
0035:  MOVLW  0F
0036:  ANDWF  08,W
0037:  IORWF  77,W
0038:  MOVWF  08
....................       delay_cycles(1); 
0039:  NOP
....................       lcd.enable = 1; 
003A:  BSF    08.0
....................       delay_us(2); 
003B:  GOTO   03C
....................       lcd.enable = 0; 
003C:  BCF    08.0
.................... } 
003D:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
003E:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
005F:  MOVF   78,W
0060:  MOVWF  29
0061:  BTFSC  29.7
0062:  GOTO   03F
....................       lcd.rs = address; 
0063:  BTFSS  27.0
0064:  BCF    08.1
0065:  BTFSC  27.0
0066:  BSF    08.1
....................       delay_cycles(1); 
0067:  NOP
....................       lcd.rw = 0; 
0068:  BCF    08.2
....................       delay_cycles(1); 
0069:  NOP
....................       lcd.enable = 0; 
006A:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
006B:  SWAPF  28,W
006C:  MOVWF  29
006D:  MOVLW  0F
006E:  ANDWF  29,F
006F:  MOVF   29,W
0070:  MOVWF  2A
0071:  CALL   032
....................       lcd_send_nibble(n & 0xf); 
0072:  MOVF   28,W
0073:  ANDLW  0F
0074:  MOVWF  29
0075:  MOVWF  2A
0076:  CALL   032
.................... } 
0077:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0078:  MOVLW  00
0079:  BSF    03.5
007A:  MOVWF  08
....................     lcd.rs = 0; 
007B:  BCF    03.5
007C:  BCF    08.1
....................     lcd.rw = 0; 
007D:  BCF    08.2
....................     lcd.enable = 0; 
007E:  BCF    08.0
....................     delay_ms(15); 
007F:  MOVLW  0F
0080:  MOVWF  23
0081:  CALL   01D
....................     for(i=1;i<=3;++i) { 
0082:  MOVLW  01
0083:  MOVWF  21
0084:  MOVF   21,W
0085:  SUBLW  03
0086:  BTFSS  03.0
0087:  GOTO   090
....................        lcd_send_nibble(3); 
0088:  MOVLW  03
0089:  MOVWF  2A
008A:  CALL   032
....................        delay_ms(5); 
008B:  MOVLW  05
008C:  MOVWF  23
008D:  CALL   01D
....................     } 
008E:  INCF   21,F
008F:  GOTO   084
....................     lcd_send_nibble(2); 
0090:  MOVLW  02
0091:  MOVWF  2A
0092:  CALL   032
....................     for(i=0;i<=3;++i) 
0093:  CLRF   21
0094:  MOVF   21,W
0095:  SUBLW  03
0096:  BTFSS  03.0
0097:  GOTO   0A1
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0098:  MOVF   21,W
0099:  CALL   004
009A:  MOVWF  22
009B:  CLRF   27
009C:  MOVF   22,W
009D:  MOVWF  28
009E:  CALL   03E
009F:  INCF   21,F
00A0:  GOTO   094
.................... } 
00A1:  BCF    0A.3
00A2:  BCF    0A.4
00A3:  GOTO   0E8 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00BB:  DECFSZ 24,W
00BC:  GOTO   0BE
00BD:  GOTO   0C1
....................      address=lcd_line_two; 
00BE:  MOVLW  40
00BF:  MOVWF  25
....................    else 
00C0:  GOTO   0C2
....................      address=0; 
00C1:  CLRF   25
....................    address+=x-1; 
00C2:  MOVLW  01
00C3:  SUBWF  23,W
00C4:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
00C5:  MOVF   25,W
00C6:  IORLW  80
00C7:  MOVWF  26
00C8:  CLRF   27
00C9:  MOVF   26,W
00CA:  MOVWF  28
00CB:  CALL   03E
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00A4:  MOVF   22,W
00A5:  XORLW  0C
00A6:  BTFSC  03.2
00A7:  GOTO   0AF
00A8:  XORLW  06
00A9:  BTFSC  03.2
00AA:  GOTO   0B7
00AB:  XORLW  02
00AC:  BTFSC  03.2
00AD:  GOTO   0CD
00AE:  GOTO   0D2
....................      case '\f'   : lcd_send_byte(0,1); 
00AF:  CLRF   27
00B0:  MOVLW  01
00B1:  MOVWF  28
00B2:  CALL   03E
....................                    delay_ms(2); 
00B3:  MOVLW  02
00B4:  MOVWF  23
00B5:  CALL   01D
....................                                            break; 
00B6:  GOTO   0D8
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00B7:  MOVLW  01
00B8:  MOVWF  23
00B9:  MOVLW  02
00BA:  MOVWF  24
*
00CC:  GOTO   0D8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00CD:  CLRF   27
00CE:  MOVLW  10
00CF:  MOVWF  28
00D0:  CALL   03E
00D1:  GOTO   0D8
....................      default     : lcd_send_byte(1,c);     break; 
00D2:  MOVLW  01
00D3:  MOVWF  27
00D4:  MOVF   22,W
00D5:  MOVWF  28
00D6:  CALL   03E
00D7:  GOTO   0D8
....................    } 
.................... } 
00D8:  BCF    0A.3
00D9:  BCF    0A.4
00DA:  GOTO   0EF (RETURN)
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................             
.................... void main(void){ 
00DB:  CLRF   04
00DC:  BCF    03.7
00DD:  MOVLW  1F
00DE:  ANDWF  03,F
00DF:  BSF    03.5
00E0:  BSF    1F.0
00E1:  BSF    1F.1
00E2:  BSF    1F.2
00E3:  BCF    1F.3
00E4:  MOVLW  07
00E5:  MOVWF  1C
....................  
....................    lcd_init();     
00E6:  BCF    03.5
00E7:  GOTO   078
....................    printf(lcd_putc,"Hola LaboTEC"); 
00E8:  CLRF   21
00E9:  MOVF   21,W
00EA:  CALL   00C
00EB:  INCF   21,F
00EC:  MOVWF  77
00ED:  MOVWF  22
00EE:  GOTO   0A4
00EF:  MOVLW  0C
00F0:  SUBWF  21,W
00F1:  BTFSS  03.2
00F2:  GOTO   0E9
....................    for(;;){  
....................  
....................    } 
00F3:  GOTO   0F3
.................... } 
....................  
....................  
....................  
00F4:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
